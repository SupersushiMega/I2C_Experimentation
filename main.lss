
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00001b02  00001b96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  0080012c  0080012c  00001bc2  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00001bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000410  00000000  00000000  00001c42  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e2c  00000000  00000000  00002052  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000651  00000000  00000000  00003e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001586  00000000  00000000  000044cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000310  00000000  00000000  00005a58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003eb  00000000  00000000  00005d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b92  00000000  00000000  00006153  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00006ce5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__ctors_end>
       4:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
       8:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
       c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      10:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      14:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      18:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      1c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      20:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      24:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      28:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      2c:	0c 94 ab 01 	jmp	0x356	; 0x356 <__vector_11>
      30:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      34:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      38:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      3c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      40:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__vector_16>
      44:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      48:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      4c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      50:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      54:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      58:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      5c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      60:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      64:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>

00000068 <CharMap>:
	...
      70:	5f 00 00 00 00 07 00 07 00 00 14 7f 14 7f 14 00     _...............
      80:	24 2a 7f 2a 12 00 23 13 08 64 62 00 36 49 56 20     $*.*..#..db.6IV 
      90:	50 00 00 08 07 03 00 00 00 1c 22 41 00 00 00 41     P........."A...A
      a0:	22 1c 00 00 2a 1c 7f 1c 2a 00 08 08 3e 08 08 00     "...*...*...>...
      b0:	00 80 70 30 00 00 08 08 08 08 08 00 00 00 60 60     ..p0..........``
      c0:	00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00 42     .. .....>QIE>..B
      d0:	7f 40 00 00 72 49 49 49 46 00 21 41 49 4d 33 00     .@..rIIIF.!AIM3.
      e0:	18 14 12 7f 10 00 27 45 45 45 39 00 3c 4a 49 49     ......'EEE9.<JII
      f0:	31 00 41 21 11 09 07 00 36 49 49 49 36 00 46 49     1.A!....6III6.FI
     100:	49 29 1e 00 00 00 14 00 00 00 00 40 34 00 00 00     I).........@4...
     110:	00 08 14 22 41 00 14 14 14 14 14 00 00 41 22 14     ..."A........A".
     120:	08 00 02 01 59 09 06 00 3e 41 5d 59 4e 00 7c 12     ....Y...>A]YN.|.
     130:	11 12 7c 00 7f 49 49 49 36 00 3e 41 41 41 22 00     ..|..III6.>AAA".
     140:	7f 41 41 41 3e 00 7f 49 49 49 41 00 7f 09 09 09     .AAA>..IIIA.....
     150:	01 00 3e 41 41 51 73 00 7f 08 08 08 7f 00 00 41     ..>AAQs........A
     160:	7f 41 00 00 20 40 41 3f 01 00 7f 08 14 22 41 00     .A.. @A?....."A.
     170:	7f 40 40 40 40 00 7f 02 1c 02 7f 00 7f 04 08 10     .@@@@...........
     180:	7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e 41     ..>AAA>.......>A
     190:	51 21 5e 00 7f 09 19 29 46 00 26 49 49 49 32 00     Q!^....)F.&III2.
     1a0:	03 01 7f 01 03 00 3f 40 40 40 3f 00 1f 20 40 20     ......?@@@?.. @ 
     1b0:	1f 00 3f 40 38 40 3f 00 63 14 08 14 63 00 03 04     ..?@8@?.c...c...
     1c0:	78 04 03 00 61 59 49 4d 43 00 00 7f 41 41 41 00     x...aYIMC...AAA.
     1d0:	02 04 08 10 20 00 00 41 41 41 7f 00 04 02 01 02     .... ..AAA......
     1e0:	04 00 40 40 40 40 40 00 00 03 07 08 00 00 20 54     ..@@@@@....... T
     1f0:	54 78 40 00 7f 28 44 44 38 00 38 44 44 44 28 00     Tx@..(DD8.8DDD(.
     200:	38 44 44 28 7f 00 38 54 54 54 18 00 00 08 7e 09     8DD(..8TTT....~.
     210:	02 00 18 a4 a4 9c 78 00 7f 08 04 04 78 00 00 44     ......x.....x..D
     220:	7d 40 00 00 20 40 40 3d 00 00 7f 10 28 44 00 00     }@.. @@=....(D..
     230:	00 41 7f 40 00 00 7c 04 78 04 78 00 7c 08 04 04     .A.@..|.x.x.|...
     240:	78 00 38 44 44 44 38 00 fc 18 24 24 18 00 18 24     x.8DDD8...$$...$
     250:	24 18 fc 00 7c 08 04 04 08 00 48 54 54 54 24 00     $...|.....HTTT$.
     260:	04 04 3f 44 24 00 3c 40 40 20 7c 00 1c 20 40 20     ..?D$.<@@ |.. @ 
     270:	1c 00 3c 40 30 40 3c 00 44 28 10 28 44 00 4c 90     ..<@0@<.D(.(D.L.
     280:	90 90 7c 00 44 64 54 4c 44 00 00 08 36 41 00 00     ..|.DdTLD...6A..
     290:	00 00 77 00 00 00 00 41 36 08 00 00 00 06 09 06     ..w....A6.......
     2a0:	00 00 ff ff ff ff ff 00                             ........

000002a8 <__ctors_end>:
     2a8:	11 24       	eor	r1, r1
     2aa:	1f be       	out	0x3f, r1	; 63
     2ac:	cf ef       	ldi	r28, 0xFF	; 255
     2ae:	d8 e0       	ldi	r29, 0x08	; 8
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	cd bf       	out	0x3d, r28	; 61

000002b4 <__do_copy_data>:
     2b4:	11 e0       	ldi	r17, 0x01	; 1
     2b6:	a0 e0       	ldi	r26, 0x00	; 0
     2b8:	b1 e0       	ldi	r27, 0x01	; 1
     2ba:	e2 e0       	ldi	r30, 0x02	; 2
     2bc:	fb e1       	ldi	r31, 0x1B	; 27
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <.do_copy_data_start>

000002c0 <.do_copy_data_loop>:
     2c0:	05 90       	lpm	r0, Z+
     2c2:	0d 92       	st	X+, r0

000002c4 <.do_copy_data_start>:
     2c4:	ac 32       	cpi	r26, 0x2C	; 44
     2c6:	b1 07       	cpc	r27, r17
     2c8:	d9 f7       	brne	.-10     	; 0x2c0 <.do_copy_data_loop>

000002ca <__do_clear_bss>:
     2ca:	11 e0       	ldi	r17, 0x01	; 1
     2cc:	ac e2       	ldi	r26, 0x2C	; 44
     2ce:	b1 e0       	ldi	r27, 0x01	; 1
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <.do_clear_bss_start>

000002d2 <.do_clear_bss_loop>:
     2d2:	1d 92       	st	X+, r1

000002d4 <.do_clear_bss_start>:
     2d4:	a4 35       	cpi	r26, 0x54	; 84
     2d6:	b1 07       	cpc	r27, r17
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <.do_clear_bss_loop>
     2da:	0e 94 f6 01 	call	0x3ec	; 0x3ec <main>
     2de:	0c 94 7f 0d 	jmp	0x1afe	; 0x1afe <_exit>

000002e2 <__bad_interrupt>:
     2e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002e6 <__vector_16>:
uint8_t ISR_zaehler = 0;
uint8_t ms = 0;
uint8_t second = 0;
uint16_t minute = 0;
ISR (TIMER0_OVF_vect)
{
     2e6:	1f 92       	push	r1
     2e8:	0f 92       	push	r0
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	0f 92       	push	r0
     2ee:	11 24       	eor	r1, r1
     2f0:	8f 93       	push	r24
     2f2:	9f 93       	push	r25
	TCNT0 = 0;
     2f4:	16 bc       	out	0x26, r1	; 38
	ISR_zaehler++;
     2f6:	80 91 2c 01 	lds	r24, 0x012C
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	80 93 2c 01 	sts	0x012C, r24
	if(ISR_zaehler == 12)
     300:	8c 30       	cpi	r24, 0x0C	; 12
     302:	e9 f4       	brne	.+58     	; 0x33e <__vector_16+0x58>
	{
		ms++;
     304:	80 91 2d 01 	lds	r24, 0x012D
     308:	8f 5f       	subi	r24, 0xFF	; 255
     30a:	80 93 2d 01 	sts	0x012D, r24
		ISR_zaehler = 0;
     30e:	10 92 2c 01 	sts	0x012C, r1
		if (ms == 10)
     312:	8a 30       	cpi	r24, 0x0A	; 10
     314:	a1 f4       	brne	.+40     	; 0x33e <__vector_16+0x58>
		{
			second ++;
     316:	80 91 2e 01 	lds	r24, 0x012E
     31a:	8f 5f       	subi	r24, 0xFF	; 255
     31c:	80 93 2e 01 	sts	0x012E, r24
			ms = 0;
     320:	10 92 2d 01 	sts	0x012D, r1
			if (second == 60)
     324:	8c 33       	cpi	r24, 0x3C	; 60
     326:	59 f4       	brne	.+22     	; 0x33e <__vector_16+0x58>
			{
				minute ++;
     328:	80 91 2f 01 	lds	r24, 0x012F
     32c:	90 91 30 01 	lds	r25, 0x0130
     330:	01 96       	adiw	r24, 0x01	; 1
     332:	90 93 30 01 	sts	0x0130, r25
     336:	80 93 2f 01 	sts	0x012F, r24
				second = 0;
     33a:	10 92 2e 01 	sts	0x012E, r1
			}
		}
	}
}//End of ISR
     33e:	9f 91       	pop	r25
     340:	8f 91       	pop	r24
     342:	0f 90       	pop	r0
     344:	0f be       	out	0x3f, r0	; 63
     346:	0f 90       	pop	r0
     348:	1f 90       	pop	r1
     34a:	18 95       	reti

0000034c <SPI_MasterTransmit>:

void SPI_MasterTransmit(uint8_t cData)
{/* Start transmission */
	SPDR = cData;
     34c:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
     34e:	0d b4       	in	r0, 0x2d	; 45
     350:	07 fe       	sbrs	r0, 7
     352:	fd cf       	rjmp	.-6      	; 0x34e <SPI_MasterTransmit+0x2>
	;
}
     354:	08 95       	ret

00000356 <__vector_11>:
	sprintf(buffer, Param, number);	//convert value to string and store in buffer
	PlotString(buffer);	//Draw string in buffer
}

ISR (TIMER1_COMPA_vect)
{
     356:	1f 92       	push	r1
     358:	0f 92       	push	r0
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	0f 92       	push	r0
     35e:	11 24       	eor	r1, r1
	
}
     360:	0f 90       	pop	r0
     362:	0f be       	out	0x3f, r0	; 63
     364:	0f 90       	pop	r0
     366:	1f 90       	pop	r1
     368:	18 95       	reti

0000036a <PlotNumb>:

	}//end of for()
}//end of main

void PlotNumb(char Param[], int32_t number)
{
     36a:	0f 93       	push	r16
     36c:	1f 93       	push	r17
     36e:	df 93       	push	r29
     370:	cf 93       	push	r28
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	64 97       	sbiw	r28, 0x14	; 20
     378:	0f b6       	in	r0, 0x3f	; 63
     37a:	f8 94       	cli
     37c:	de bf       	out	0x3e, r29	; 62
     37e:	0f be       	out	0x3f, r0	; 63
     380:	cd bf       	out	0x3d, r28	; 61
	char buffer[20] = {0};	//define and initialise buffer variable
     382:	8e 01       	movw	r16, r28
     384:	0f 5f       	subi	r16, 0xFF	; 255
     386:	1f 4f       	sbci	r17, 0xFF	; 255
     388:	24 e1       	ldi	r18, 0x14	; 20
     38a:	d8 01       	movw	r26, r16
     38c:	1d 92       	st	X+, r1
     38e:	2a 95       	dec	r18
     390:	e9 f7       	brne	.-6      	; 0x38c <PlotNumb+0x22>
	sprintf(buffer, Param, number);	//convert value to string and store in buffer
     392:	ed b7       	in	r30, 0x3d	; 61
     394:	fe b7       	in	r31, 0x3e	; 62
     396:	38 97       	sbiw	r30, 0x08	; 8
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	f8 94       	cli
     39c:	fe bf       	out	0x3e, r31	; 62
     39e:	0f be       	out	0x3f, r0	; 63
     3a0:	ed bf       	out	0x3d, r30	; 61
     3a2:	31 96       	adiw	r30, 0x01	; 1
     3a4:	ad b7       	in	r26, 0x3d	; 61
     3a6:	be b7       	in	r27, 0x3e	; 62
     3a8:	12 96       	adiw	r26, 0x02	; 2
     3aa:	1c 93       	st	X, r17
     3ac:	0e 93       	st	-X, r16
     3ae:	11 97       	sbiw	r26, 0x01	; 1
     3b0:	93 83       	std	Z+3, r25	; 0x03
     3b2:	82 83       	std	Z+2, r24	; 0x02
     3b4:	44 83       	std	Z+4, r20	; 0x04
     3b6:	55 83       	std	Z+5, r21	; 0x05
     3b8:	66 83       	std	Z+6, r22	; 0x06
     3ba:	77 83       	std	Z+7, r23	; 0x07
     3bc:	0e 94 a7 0a 	call	0x154e	; 0x154e <sprintf>
	PlotString(buffer);	//Draw string in buffer
     3c0:	ed b7       	in	r30, 0x3d	; 61
     3c2:	fe b7       	in	r31, 0x3e	; 62
     3c4:	38 96       	adiw	r30, 0x08	; 8
     3c6:	0f b6       	in	r0, 0x3f	; 63
     3c8:	f8 94       	cli
     3ca:	fe bf       	out	0x3e, r31	; 62
     3cc:	0f be       	out	0x3f, r0	; 63
     3ce:	ed bf       	out	0x3d, r30	; 61
     3d0:	c8 01       	movw	r24, r16
     3d2:	0e 94 87 04 	call	0x90e	; 0x90e <PlotString>
}
     3d6:	64 96       	adiw	r28, 0x14	; 20
     3d8:	0f b6       	in	r0, 0x3f	; 63
     3da:	f8 94       	cli
     3dc:	de bf       	out	0x3e, r29	; 62
     3de:	0f be       	out	0x3f, r0	; 63
     3e0:	cd bf       	out	0x3d, r28	; 61
     3e2:	cf 91       	pop	r28
     3e4:	df 91       	pop	r29
     3e6:	1f 91       	pop	r17
     3e8:	0f 91       	pop	r16
     3ea:	08 95       	ret

000003ec <main>:
	T  = ((t_fine * 5 + 128) >> 8);
	return T;
}

int main(void)
{
     3ec:	df 93       	push	r29
     3ee:	cf 93       	push	r28
     3f0:	0f 92       	push	r0
     3f2:	cd b7       	in	r28, 0x3d	; 61
     3f4:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1<<DC) | (1<<CS) | (1<<MOSI) |( 1<<SCK); 	// All outputs
     3f6:	64 b1       	in	r22, 0x04	; 4
     3f8:	21 e0       	ldi	r18, 0x01	; 1
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	f9 01       	movw	r30, r18
     3fe:	00 90 1f 01 	lds	r0, 0x011F
     402:	02 c0       	rjmp	.+4      	; 0x408 <main+0x1c>
     404:	ee 0f       	add	r30, r30
     406:	ff 1f       	adc	r31, r31
     408:	0a 94       	dec	r0
     40a:	e2 f7       	brpl	.-8      	; 0x404 <main+0x18>
     40c:	a9 01       	movw	r20, r18
     40e:	00 90 1d 01 	lds	r0, 0x011D
     412:	02 c0       	rjmp	.+4      	; 0x418 <main+0x2c>
     414:	44 0f       	add	r20, r20
     416:	55 1f       	adc	r21, r21
     418:	0a 94       	dec	r0
     41a:	e2 f7       	brpl	.-8      	; 0x414 <main+0x28>
     41c:	c9 01       	movw	r24, r18
     41e:	00 90 19 01 	lds	r0, 0x0119
     422:	02 c0       	rjmp	.+4      	; 0x428 <main+0x3c>
     424:	88 0f       	add	r24, r24
     426:	99 1f       	adc	r25, r25
     428:	0a 94       	dec	r0
     42a:	e2 f7       	brpl	.-8      	; 0x424 <main+0x38>
     42c:	8e 2b       	or	r24, r30
     42e:	68 2b       	or	r22, r24
     430:	00 90 1b 01 	lds	r0, 0x011B
     434:	02 c0       	rjmp	.+4      	; 0x43a <main+0x4e>
     436:	22 0f       	add	r18, r18
     438:	33 1f       	adc	r19, r19
     43a:	0a 94       	dec	r0
     43c:	e2 f7       	brpl	.-8      	; 0x436 <main+0x4a>
     43e:	62 2b       	or	r22, r18
     440:	64 2b       	or	r22, r20
     442:	64 b9       	out	0x04, r22	; 4
	PORTB = (1<<SCK) | (1<<CS) | (1<<DC);          		// clk, dc, and cs high
     444:	84 2b       	or	r24, r20
     446:	85 b9       	out	0x05, r24	; 5
	DDRB |= (1<<PB2);									//lcd Backlight output
     448:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1<<CS) | (1<<PB2);                  		// cs high
     44a:	85 b1       	in	r24, 0x05	; 5
     44c:	84 60       	ori	r24, 0x04	; 4
     44e:	8e 2b       	or	r24, r30
     450:	85 b9       	out	0x05, r24	; 5
	DDRC |= (1<<PC3);									//Reset Output
     452:	3b 9a       	sbi	0x07, 3	; 7
	DDRD |= (1<<PD7);									//Reset Output
     454:	57 9a       	sbi	0x0a, 7	; 10
	PORTD |= (1<<PD7);	
     456:	5f 9a       	sbi	0x0b, 7	; 11
									//Reset High
	DDRD &= ~((1<<PD6) | (1<<PD2) | (1<<PD5)); 	//Taster 1-3
     458:	8a b1       	in	r24, 0x0a	; 10
     45a:	8b 79       	andi	r24, 0x9B	; 155
     45c:	8a b9       	out	0x0a, r24	; 10
	PORTD |= ((1<<PD6) | (1<<PD2) | (1<<PD5)); 	//PUllups für Taster einschalten
     45e:	8b b1       	in	r24, 0x0b	; 11
     460:	84 66       	ori	r24, 0x64	; 100
     462:	8b b9       	out	0x0b, r24	; 11
	
		//Init SPI		CLK/2
	//==================================================================
	SPCR |= (1<<SPE) | (1<<MSTR);
     464:	8c b5       	in	r24, 0x2c	; 44
     466:	80 65       	ori	r24, 0x50	; 80
     468:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
     46a:	8d b5       	in	r24, 0x2d	; 45
     46c:	81 60       	ori	r24, 0x01	; 1
     46e:	8d bd       	out	0x2d, r24	; 45
	//==================================================================
	
		//Timer 1 Configuration
	OCR1A = 1249;	//OCR1A = 0x3D08;==1sec
     470:	81 ee       	ldi	r24, 0xE1	; 225
     472:	94 e0       	ldi	r25, 0x04	; 4
     474:	90 93 89 00 	sts	0x0089, r25
     478:	80 93 88 00 	sts	0x0088, r24
	
    TCCR1B |= (1 << WGM12);
     47c:	80 91 81 00 	lds	r24, 0x0081
     480:	88 60       	ori	r24, 0x08	; 8
     482:	80 93 81 00 	sts	0x0081, r24
    // Mode 4, CTC on OCR1A

    TIMSK1 |= (1 << OCIE1A);
     486:	80 91 6f 00 	lds	r24, 0x006F
     48a:	82 60       	ori	r24, 0x02	; 2
     48c:	80 93 6f 00 	sts	0x006F, r24
    //Set interrupt on compare match

    TCCR1B |= (1 << CS11) | (1 << CS10);
     490:	80 91 81 00 	lds	r24, 0x0081
     494:	83 60       	ori	r24, 0x03	; 3
     496:	80 93 81 00 	sts	0x0081, r24
    // set prescaler to 64 and start the timer

    sei();
     49a:	78 94       	sei
    // enable interrupts
    
    ms10=0;
     49c:	10 92 47 01 	sts	0x0147, r1
    ms100=0;
     4a0:	10 92 4a 01 	sts	0x014A, r1
    sec=0;
     4a4:	10 92 4b 01 	sts	0x014B, r1
    min=0;
     4a8:	10 92 49 01 	sts	0x0149, r1
    entprell=0;
     4ac:	10 92 48 01 	sts	0x0148, r1
	
	BACKLIGHT_ON;
     4b0:	2a 9a       	sbi	0x05, 2	; 5
	LED_ON;
     4b2:	43 9a       	sbi	0x08, 3	; 8

	setup();
     4b4:	0e 94 0e 07 	call	0xe1c	; 0xe1c <setup>
	
	//Konfiguration Timer Overflow
	//==================================================================
	TCCR0A	= 0x00;
     4b8:	14 bc       	out	0x24, r1	; 36
	TCCR0B	= 0x04;
     4ba:	84 e0       	ldi	r24, 0x04	; 4
     4bc:	85 bd       	out	0x25, r24	; 37
	TIMSK0	|= (1 << TOIE0);
     4be:	80 91 6e 00 	lds	r24, 0x006E
     4c2:	81 60       	ori	r24, 0x01	; 1
     4c4:	80 93 6e 00 	sts	0x006E, r24
	TIFR0 |= (1 << TOV0);
     4c8:	a8 9a       	sbi	0x15, 0	; 21
	sei();
     4ca:	78 94       	sei
	//==================================================================
	
	//~ uint8_t buff = 0x80;
	//~ int32_t TempData = 0x80;
	
	uint8_t data = 13;
     4cc:	8d e0       	ldi	r24, 0x0D	; 13
     4ce:	89 83       	std	Y+1, r24	; 0x01
	uint8_t error;
	I2CInit();
     4d0:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <I2CInit>
		//~ TempData |= ((int32_t)buff<<8);
		//~ buff = 0;
		//~ error = I2C_Read8(0xee, 0xFA, &buff);
		//~ TempData |= ((int32_t)buff<<16);
		//~ //PlotNumb("0x%X, ", error);
		MoveTo(0,0);
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	0e 94 7e 03 	call	0x6fc	; 0x6fc <MoveTo>
		//error = I2C_Write8(0b11011110, 0x05, 42);
		PlotNumb("0x%X, ", error);
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	40 e0       	ldi	r20, 0x00	; 0
     4e6:	50 e0       	ldi	r21, 0x00	; 0
     4e8:	60 e0       	ldi	r22, 0x00	; 0
     4ea:	70 e0       	ldi	r23, 0x00	; 0
     4ec:	0e 94 b5 01 	call	0x36a	; 0x36a <PlotNumb>
		error = I2C_Read8(0b11011110, 0x05, &data);
     4f0:	8e ed       	ldi	r24, 0xDE	; 222
     4f2:	65 e0       	ldi	r22, 0x05	; 5
     4f4:	ae 01       	movw	r20, r28
     4f6:	4f 5f       	subi	r20, 0xFF	; 255
     4f8:	5f 4f       	sbci	r21, 0xFF	; 255
     4fa:	0e 94 56 09 	call	0x12ac	; 0x12ac <I2C_Read8>
		PlotNumb("0x%X, ", error);
     4fe:	48 2f       	mov	r20, r24
     500:	50 e0       	ldi	r21, 0x00	; 0
     502:	60 e0       	ldi	r22, 0x00	; 0
     504:	70 e0       	ldi	r23, 0x00	; 0
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	0e 94 b5 01 	call	0x36a	; 0x36a <PlotNumb>
		PlotNumb("%d, ", data);
     50e:	49 81       	ldd	r20, Y+1	; 0x01
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	60 e0       	ldi	r22, 0x00	; 0
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	87 e0       	ldi	r24, 0x07	; 7
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	0e 94 b5 01 	call	0x36a	; 0x36a <PlotNumb>
     51e:	ff cf       	rjmp	.-2      	; 0x51e <main+0x132>

00000520 <BME280_compensate_T_double>:
const uint8_t size = 128;

int32_t t_fine;

int32_t BME280_compensate_T_double(int32_t rawTemp)
{ 
     520:	2f 92       	push	r2
     522:	3f 92       	push	r3
     524:	4f 92       	push	r4
     526:	5f 92       	push	r5
     528:	6f 92       	push	r6
     52a:	7f 92       	push	r7
     52c:	8f 92       	push	r8
     52e:	9f 92       	push	r9
     530:	af 92       	push	r10
     532:	bf 92       	push	r11
     534:	cf 92       	push	r12
     536:	df 92       	push	r13
     538:	ef 92       	push	r14
     53a:	ff 92       	push	r15
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	df 93       	push	r29
     542:	cf 93       	push	r28
     544:	00 d0       	rcall	.+0      	; 0x546 <BME280_compensate_T_double+0x26>
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
     54a:	1b 01       	movw	r2, r22
     54c:	2c 01       	movw	r4, r24
	uint16_t dig_T1 = 0;
	int16_t dig_T2 = 0;
	int16_t dig_T3 = 0;
	
	uint8_t temp1 = 0;
     54e:	19 82       	std	Y+1, r1	; 0x01
	uint8_t temp2 = 0;
     550:	1a 82       	std	Y+2, r1	; 0x02
	
	I2C_Read8(0xee, 0x88, &temp2);
     552:	a2 e0       	ldi	r26, 0x02	; 2
     554:	ea 2e       	mov	r14, r26
     556:	f1 2c       	mov	r15, r1
     558:	ec 0e       	add	r14, r28
     55a:	fd 1e       	adc	r15, r29
     55c:	8e ee       	ldi	r24, 0xEE	; 238
     55e:	68 e8       	ldi	r22, 0x88	; 136
     560:	a7 01       	movw	r20, r14
     562:	0e 94 56 09 	call	0x12ac	; 0x12ac <I2C_Read8>
	I2C_Read8(0xee, 0x89, &temp1);
     566:	8e ee       	ldi	r24, 0xEE	; 238
     568:	69 e8       	ldi	r22, 0x89	; 137
     56a:	8e 01       	movw	r16, r28
     56c:	0f 5f       	subi	r16, 0xFF	; 255
     56e:	1f 4f       	sbci	r17, 0xFF	; 255
     570:	a8 01       	movw	r20, r16
     572:	0e 94 56 09 	call	0x12ac	; 0x12ac <I2C_Read8>
	dig_T1 = (temp1<<8) | temp2;
     576:	99 81       	ldd	r25, Y+1	; 0x01
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	aa 80       	ldd	r10, Y+2	; 0x02
     57c:	bb 24       	eor	r11, r11
     57e:	a8 2a       	or	r10, r24
     580:	b9 2a       	or	r11, r25
	
	temp1 = 0;
     582:	19 82       	std	Y+1, r1	; 0x01
	temp2 = 0;
     584:	1a 82       	std	Y+2, r1	; 0x02
	
	I2C_Read8(0xee, 0x8A, &temp2);
     586:	8e ee       	ldi	r24, 0xEE	; 238
     588:	6a e8       	ldi	r22, 0x8A	; 138
     58a:	a7 01       	movw	r20, r14
     58c:	0e 94 56 09 	call	0x12ac	; 0x12ac <I2C_Read8>
	I2C_Read8(0xee, 0x8B, &temp1);
     590:	8e ee       	ldi	r24, 0xEE	; 238
     592:	6b e8       	ldi	r22, 0x8B	; 139
     594:	a8 01       	movw	r20, r16
     596:	0e 94 56 09 	call	0x12ac	; 0x12ac <I2C_Read8>
	dig_T2 = (temp1<<8) | temp2;
     59a:	99 81       	ldd	r25, Y+1	; 0x01
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	6a 80       	ldd	r6, Y+2	; 0x02
     5a0:	77 24       	eor	r7, r7
     5a2:	68 2a       	or	r6, r24
     5a4:	79 2a       	or	r7, r25
	
	temp1 = 0;
     5a6:	19 82       	std	Y+1, r1	; 0x01
	temp2 = 0;
     5a8:	1a 82       	std	Y+2, r1	; 0x02
	
	I2C_Read8(0xee, 0x8C, &temp2);
     5aa:	8e ee       	ldi	r24, 0xEE	; 238
     5ac:	6c e8       	ldi	r22, 0x8C	; 140
     5ae:	a7 01       	movw	r20, r14
     5b0:	0e 94 56 09 	call	0x12ac	; 0x12ac <I2C_Read8>
	I2C_Read8(0xee, 0x8D, &temp1);
     5b4:	8e ee       	ldi	r24, 0xEE	; 238
     5b6:	6d e8       	ldi	r22, 0x8D	; 141
     5b8:	a8 01       	movw	r20, r16
     5ba:	0e 94 56 09 	call	0x12ac	; 0x12ac <I2C_Read8>
	dig_T3 = (temp1<<8) | temp2;
	
	int32_t var1;
	int32_t var2;
	int32_t T;
	var1  = ((((rawTemp>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11; 
     5be:	cc 24       	eor	r12, r12
     5c0:	dd 24       	eor	r13, r13
	var2  = (((((rawTemp>>4) - ((int32_t)dig_T1)) * ((rawTemp>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14; 
     5c2:	a2 01       	movw	r20, r4
     5c4:	91 01       	movw	r18, r2
     5c6:	f4 e0       	ldi	r31, 0x04	; 4
     5c8:	55 95       	asr	r21
     5ca:	47 95       	ror	r20
     5cc:	37 95       	ror	r19
     5ce:	27 95       	ror	r18
     5d0:	fa 95       	dec	r31
     5d2:	d1 f7       	brne	.-12     	; 0x5c8 <BME280_compensate_T_double+0xa8>
     5d4:	2a 19       	sub	r18, r10
     5d6:	3b 09       	sbc	r19, r11
     5d8:	4c 09       	sbc	r20, r12
     5da:	5d 09       	sbc	r21, r13
	t_fine = (var1 + var2);
     5dc:	ca 01       	movw	r24, r20
     5de:	b9 01       	movw	r22, r18
     5e0:	0e 94 88 0a 	call	0x1510	; 0x1510 <__mulsi3>
     5e4:	ec e0       	ldi	r30, 0x0C	; 12
     5e6:	95 95       	asr	r25
     5e8:	87 95       	ror	r24
     5ea:	77 95       	ror	r23
     5ec:	67 95       	ror	r22
     5ee:	ea 95       	dec	r30
     5f0:	d1 f7       	brne	.-12     	; 0x5e6 <BME280_compensate_T_double+0xc6>
     5f2:	39 81       	ldd	r19, Y+1	; 0x01
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	ea 81       	ldd	r30, Y+2	; 0x02
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
     5fa:	2e 2b       	or	r18, r30
     5fc:	3f 2b       	or	r19, r31
     5fe:	44 27       	eor	r20, r20
     600:	37 fd       	sbrc	r19, 7
     602:	40 95       	com	r20
     604:	54 2f       	mov	r21, r20
     606:	0e 94 88 0a 	call	0x1510	; 0x1510 <__mulsi3>
     60a:	7b 01       	movw	r14, r22
     60c:	8c 01       	movw	r16, r24
     60e:	5e e0       	ldi	r21, 0x0E	; 14
     610:	15 95       	asr	r17
     612:	07 95       	ror	r16
     614:	f7 94       	ror	r15
     616:	e7 94       	ror	r14
     618:	5a 95       	dec	r21
     61a:	d1 f7       	brne	.-12     	; 0x610 <BME280_compensate_T_double+0xf0>
     61c:	43 e0       	ldi	r20, 0x03	; 3
     61e:	55 94       	asr	r5
     620:	47 94       	ror	r4
     622:	37 94       	ror	r3
     624:	27 94       	ror	r2
     626:	4a 95       	dec	r20
     628:	d1 f7       	brne	.-12     	; 0x61e <BME280_compensate_T_double+0xfe>
     62a:	aa 0c       	add	r10, r10
     62c:	bb 1c       	adc	r11, r11
     62e:	cc 1c       	adc	r12, r12
     630:	dd 1c       	adc	r13, r13
     632:	2a 18       	sub	r2, r10
     634:	3b 08       	sbc	r3, r11
     636:	4c 08       	sbc	r4, r12
     638:	5d 08       	sbc	r5, r13
     63a:	88 24       	eor	r8, r8
     63c:	77 fc       	sbrc	r7, 7
     63e:	80 94       	com	r8
     640:	98 2c       	mov	r9, r8
     642:	c2 01       	movw	r24, r4
     644:	b1 01       	movw	r22, r2
     646:	a4 01       	movw	r20, r8
     648:	93 01       	movw	r18, r6
     64a:	0e 94 88 0a 	call	0x1510	; 0x1510 <__mulsi3>
     64e:	2b e0       	ldi	r18, 0x0B	; 11
     650:	95 95       	asr	r25
     652:	87 95       	ror	r24
     654:	77 95       	ror	r23
     656:	67 95       	ror	r22
     658:	2a 95       	dec	r18
     65a:	d1 f7       	brne	.-12     	; 0x650 <BME280_compensate_T_double+0x130>
     65c:	e6 0e       	add	r14, r22
     65e:	f7 1e       	adc	r15, r23
     660:	08 1f       	adc	r16, r24
     662:	19 1f       	adc	r17, r25
     664:	e0 92 4c 01 	sts	0x014C, r14
     668:	f0 92 4d 01 	sts	0x014D, r15
     66c:	00 93 4e 01 	sts	0x014E, r16
     670:	10 93 4f 01 	sts	0x014F, r17
     674:	a8 01       	movw	r20, r16
     676:	97 01       	movw	r18, r14
     678:	92 e0       	ldi	r25, 0x02	; 2
     67a:	22 0f       	add	r18, r18
     67c:	33 1f       	adc	r19, r19
     67e:	44 1f       	adc	r20, r20
     680:	55 1f       	adc	r21, r21
     682:	9a 95       	dec	r25
     684:	d1 f7       	brne	.-12     	; 0x67a <BME280_compensate_T_double+0x15a>
     686:	2e 0d       	add	r18, r14
     688:	3f 1d       	adc	r19, r15
     68a:	40 1f       	adc	r20, r16
     68c:	51 1f       	adc	r21, r17
     68e:	20 58       	subi	r18, 0x80	; 128
     690:	3f 4f       	sbci	r19, 0xFF	; 255
     692:	4f 4f       	sbci	r20, 0xFF	; 255
     694:	5f 4f       	sbci	r21, 0xFF	; 255
     696:	23 2f       	mov	r18, r19
     698:	34 2f       	mov	r19, r20
     69a:	45 2f       	mov	r20, r21
     69c:	55 27       	eor	r21, r21
     69e:	47 fd       	sbrc	r20, 7
     6a0:	5a 95       	dec	r21
	T  = ((t_fine * 5 + 128) >> 8);
	return T;
}
     6a2:	b9 01       	movw	r22, r18
     6a4:	ca 01       	movw	r24, r20
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	cf 91       	pop	r28
     6ac:	df 91       	pop	r29
     6ae:	1f 91       	pop	r17
     6b0:	0f 91       	pop	r16
     6b2:	ff 90       	pop	r15
     6b4:	ef 90       	pop	r14
     6b6:	df 90       	pop	r13
     6b8:	cf 90       	pop	r12
     6ba:	bf 90       	pop	r11
     6bc:	af 90       	pop	r10
     6be:	9f 90       	pop	r9
     6c0:	8f 90       	pop	r8
     6c2:	7f 90       	pop	r7
     6c4:	6f 90       	pop	r6
     6c6:	5f 90       	pop	r5
     6c8:	4f 90       	pop	r4
     6ca:	3f 90       	pop	r3
     6cc:	2f 90       	pop	r2
     6ce:	08 95       	ret

000006d0 <Colour>:
  //8-bit data bus for 16-bit/pixel (RGB 5-6-5-bit input), 65K-Colors, 3AH= “05h”
  PINB = 1<<CS;                            // cs high
}

unsigned int Colour (int b, int g, int r) 
{
     6d0:	6c 7f       	andi	r22, 0xFC	; 252
     6d2:	70 70       	andi	r23, 0x00	; 0
     6d4:	33 e0       	ldi	r19, 0x03	; 3
     6d6:	66 0f       	add	r22, r22
     6d8:	77 1f       	adc	r23, r23
     6da:	3a 95       	dec	r19
     6dc:	e1 f7       	brne	.-8      	; 0x6d6 <Colour+0x6>
     6de:	23 e0       	ldi	r18, 0x03	; 3
     6e0:	95 95       	asr	r25
     6e2:	87 95       	ror	r24
     6e4:	2a 95       	dec	r18
     6e6:	e1 f7       	brne	.-8      	; 0x6e0 <Colour+0x10>
     6e8:	68 2b       	or	r22, r24
     6ea:	79 2b       	or	r23, r25
     6ec:	48 7f       	andi	r20, 0xF8	; 248
     6ee:	50 70       	andi	r21, 0x00	; 0
     6f0:	54 2f       	mov	r21, r20
     6f2:	44 27       	eor	r20, r20
     6f4:	64 2b       	or	r22, r20
     6f6:	75 2b       	or	r23, r21
  return (r & 0xf8)<<8 | (g & 0xfc)<<3 | b>>3;
  //return (r & 0xf8)<<8 | (g & 0xfc)<<3 | b>>3;//original 
}
     6f8:	cb 01       	movw	r24, r22
     6fa:	08 95       	ret

000006fc <MoveTo>:

// Move current plot position to x,y
void MoveTo (int x, int y) 
{
  x_0 = x; y_0 = y;
     6fc:	90 93 51 01 	sts	0x0151, r25
     700:	80 93 50 01 	sts	0x0150, r24
     704:	70 93 53 01 	sts	0x0153, r23
     708:	60 93 52 01 	sts	0x0152, r22
}
     70c:	08 95       	ret

0000070e <Data>:
 int scale = 1;     // Text scale

// Send a byte to the display
void Data (uint8_t d) 
{
	SPI_MasterTransmit(d);
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
}
     714:	08 95       	ret

00000716 <Command4>:
    PINB = 1<<DC;                          // dc high again
}

// Send a command followed by four data bytes
void Command4 (uint8_t c, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4) 
{
     716:	df 92       	push	r13
     718:	ef 92       	push	r14
     71a:	ff 92       	push	r15
     71c:	0f 93       	push	r16
     71e:	1f 93       	push	r17
     720:	f6 2e       	mov	r15, r22
     722:	e4 2e       	mov	r14, r20
     724:	d2 2e       	mov	r13, r18
    PINB = (1<<DC);                          // dc low
     726:	12 e0       	ldi	r17, 0x02	; 2
     728:	13 b9       	out	0x03, r17	; 3
 int scale = 1;     // Text scale

// Send a byte to the display
void Data (uint8_t d) 
{
	SPI_MasterTransmit(d);
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
// Send a command followed by four data bytes
void Command4 (uint8_t c, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4) 
{
    PINB = (1<<DC);                          // dc low
    Data(c);
    PINB = 1<<DC;                          // dc high again
     730:	13 b9       	out	0x03, r17	; 3
 int scale = 1;     // Text scale

// Send a byte to the display
void Data (uint8_t d) 
{
	SPI_MasterTransmit(d);
     732:	8f 2d       	mov	r24, r15
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
{
    PINB = (1<<DC);                          // dc low
    Data(c);
    PINB = 1<<DC;                          // dc high again
    Data(d1); Data(d2); Data(d3); Data(d4);
}
     73a:	8e 2d       	mov	r24, r14
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
     742:	8d 2d       	mov	r24, r13
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
     74a:	80 2f       	mov	r24, r16
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
     752:	1f 91       	pop	r17
     754:	0f 91       	pop	r16
     756:	ff 90       	pop	r15
     758:	ef 90       	pop	r14
     75a:	df 90       	pop	r13
     75c:	08 95       	ret

0000075e <Command>:
	SPI_MasterTransmit(d);
}

// Send a command to the display
void Command (uint8_t c) 
{
     75e:	1f 93       	push	r17
    PINB = 1<<DC;                          // dc low
     760:	12 e0       	ldi	r17, 0x02	; 2
     762:	13 b9       	out	0x03, r17	; 3
 int scale = 1;     // Text scale

// Send a byte to the display
void Data (uint8_t d) 
{
	SPI_MasterTransmit(d);
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
// Send a command to the display
void Command (uint8_t c) 
{
    PINB = 1<<DC;                          // dc low
    Data(c);
    PINB = 1<<DC;                          // dc high again
     76a:	13 b9       	out	0x03, r17	; 3
}
     76c:	1f 91       	pop	r17
     76e:	08 95       	ret

00000770 <DisplayOn>:
  PINB = 1<<CS;                            // cs high
}

void DisplayOn (void) 
{
  PINB = 1<<CS;                            // cs low
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	83 b9       	out	0x03, r24	; 3
  Command(0x29);                           // Display on
     774:	89 e2       	ldi	r24, 0x29	; 41
     776:	0e 94 af 03 	call	0x75e	; 0x75e <Command>
     77a:	88 ee       	ldi	r24, 0xE8	; 232
     77c:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     77e:	28 ec       	ldi	r18, 0xC8	; 200
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	f9 01       	movw	r30, r18
     784:	31 97       	sbiw	r30, 0x01	; 1
     786:	f1 f7       	brne	.-4      	; 0x784 <DisplayOn+0x14>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     788:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     78a:	d9 f7       	brne	.-10     	; 0x782 <DisplayOn+0x12>
  _delay_ms(100);
  PINB = 1<<CS;                            // cs high
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	83 b9       	out	0x03, r24	; 3
}
     790:	08 95       	ret

00000792 <PlotChar>:
  PINB = 1<<CS;                            // cs high
}

// Plot an ASCII character with bottom left corner at x,y
void PlotChar (char c) 
{
     792:	4f 92       	push	r4
     794:	5f 92       	push	r5
     796:	6f 92       	push	r6
     798:	7f 92       	push	r7
     79a:	9f 92       	push	r9
     79c:	af 92       	push	r10
     79e:	bf 92       	push	r11
     7a0:	cf 92       	push	r12
     7a2:	df 92       	push	r13
     7a4:	ef 92       	push	r14
     7a6:	ff 92       	push	r15
     7a8:	0f 93       	push	r16
     7aa:	1f 93       	push	r17
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	18 2f       	mov	r17, r24
  int colour;
  PINB = 1<<CS;                            // cs low
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	83 b9       	out	0x03, r24	; 3
  Command4(CASET, 0, yoff+y_0, 0, yoff+y_0+8*scale-1);
     7b6:	40 91 52 01 	lds	r20, 0x0152
     7ba:	80 91 29 01 	lds	r24, 0x0129
     7be:	90 91 2a 01 	lds	r25, 0x012A
     7c2:	23 e0       	ldi	r18, 0x03	; 3
     7c4:	88 0f       	add	r24, r24
     7c6:	99 1f       	adc	r25, r25
     7c8:	2a 95       	dec	r18
     7ca:	e1 f7       	brne	.-8      	; 0x7c4 <PlotChar+0x32>
     7cc:	04 2f       	mov	r16, r20
     7ce:	08 0f       	add	r16, r24
     7d0:	8a e2       	ldi	r24, 0x2A	; 42
     7d2:	60 e0       	ldi	r22, 0x00	; 0
     7d4:	4f 5f       	subi	r20, 0xFF	; 255
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	0e 94 8b 03 	call	0x716	; 0x716 <Command4>
  Command4(RASET, 0, xoff+x_0, 0, xoff+x_0+6*scale-1);
     7dc:	40 91 50 01 	lds	r20, 0x0150
     7e0:	4f 5f       	subi	r20, 0xFF	; 255
     7e2:	20 91 29 01 	lds	r18, 0x0129
     7e6:	30 91 2a 01 	lds	r19, 0x012A
     7ea:	c9 01       	movw	r24, r18
     7ec:	88 0f       	add	r24, r24
     7ee:	99 1f       	adc	r25, r25
     7f0:	82 0f       	add	r24, r18
     7f2:	93 1f       	adc	r25, r19
     7f4:	88 0f       	add	r24, r24
     7f6:	99 1f       	adc	r25, r25
     7f8:	04 2f       	mov	r16, r20
     7fa:	08 0f       	add	r16, r24
     7fc:	8b e2       	ldi	r24, 0x2B	; 43
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	4f 5f       	subi	r20, 0xFF	; 255
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	0e 94 8b 03 	call	0x716	; 0x716 <Command4>
  Command(RAMWR);
     808:	8c e2       	ldi	r24, 0x2C	; 44
     80a:	0e 94 af 03 	call	0x75e	; 0x75e <Command>
  for (int xx=0; xx<6; xx++) 
  {
    int bits = pgm_read_byte(&CharMap[c-32][xx]);
     80e:	86 e0       	ldi	r24, 0x06	; 6
     810:	18 9f       	mul	r17, r24
     812:	c0 01       	movw	r24, r0
     814:	11 24       	eor	r1, r1
     816:	a8 ea       	ldi	r26, 0xA8	; 168
     818:	ca 2e       	mov	r12, r26
     81a:	af ef       	ldi	r26, 0xFF	; 255
     81c:	da 2e       	mov	r13, r26
     81e:	c8 0e       	add	r12, r24
     820:	d9 1e       	adc	r13, r25
  int colour;
  PINB = 1<<CS;                            // cs low
  Command4(CASET, 0, yoff+y_0, 0, yoff+y_0+8*scale-1);
  Command4(RASET, 0, xoff+x_0, 0, xoff+x_0+6*scale-1);
  Command(RAMWR);
  for (int xx=0; xx<6; xx++) 
     822:	fe ea       	ldi	r31, 0xAE	; 174
     824:	4f 2e       	mov	r4, r31
     826:	ff ef       	ldi	r31, 0xFF	; 255
     828:	5f 2e       	mov	r5, r31
     82a:	48 0e       	add	r4, r24
     82c:	59 1e       	adc	r5, r25
  {
    int bits = pgm_read_byte(&CharMap[c-32][xx]);
     82e:	f6 01       	movw	r30, r12
     830:	84 91       	lpm	r24, Z+
     832:	68 2e       	mov	r6, r24
     834:	77 24       	eor	r7, r7
     836:	aa 24       	eor	r10, r10
     838:	bb 24       	eor	r11, r11
     83a:	38 c0       	rjmp	.+112    	; 0x8ac <PlotChar+0x11a>
    for (int xr=0; xr<scale; xr++) 
     83c:	e7 e0       	ldi	r30, 0x07	; 7
     83e:	ee 2e       	mov	r14, r30
     840:	f1 2c       	mov	r15, r1
    {
      for (int yy=0; yy<8; yy++) 
      {
        if (bits>>(7-yy) & 1) colour = fore; else colour = back;
     842:	c3 01       	movw	r24, r6
     844:	0e 2c       	mov	r0, r14
     846:	02 c0       	rjmp	.+4      	; 0x84c <PlotChar+0xba>
     848:	95 95       	asr	r25
     84a:	87 95       	ror	r24
     84c:	0a 94       	dec	r0
     84e:	e2 f7       	brpl	.-8      	; 0x848 <PlotChar+0xb6>
     850:	80 ff       	sbrs	r24, 0
     852:	05 c0       	rjmp	.+10     	; 0x85e <PlotChar+0xcc>
     854:	00 91 27 01 	lds	r16, 0x0127
     858:	10 91 28 01 	lds	r17, 0x0128
     85c:	04 c0       	rjmp	.+8      	; 0x866 <PlotChar+0xd4>
     85e:	00 91 31 01 	lds	r16, 0x0131
     862:	10 91 32 01 	lds	r17, 0x0132
 int scale = 1;     // Text scale

// Send a byte to the display
void Data (uint8_t d) 
{
	SPI_MasterTransmit(d);
     866:	81 2f       	mov	r24, r17
     868:	99 27       	eor	r25, r25
     86a:	87 fd       	sbrc	r24, 7
     86c:	9a 95       	dec	r25
     86e:	98 2e       	mov	r9, r24
     870:	c0 e0       	ldi	r28, 0x00	; 0
     872:	d0 e0       	ldi	r29, 0x00	; 0
     874:	09 c0       	rjmp	.+18     	; 0x888 <PlotChar+0xf6>
    for (int xr=0; xr<scale; xr++) 
    {
      for (int yy=0; yy<8; yy++) 
      {
        if (bits>>(7-yy) & 1) colour = fore; else colour = back;
        for (int yr=0; yr<scale; yr++) 
     876:	89 2d       	mov	r24, r9
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
 int scale = 1;     // Text scale

// Send a byte to the display
void Data (uint8_t d) 
{
	SPI_MasterTransmit(d);
     87e:	80 2f       	mov	r24, r16
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
    for (int xr=0; xr<scale; xr++) 
    {
      for (int yy=0; yy<8; yy++) 
      {
        if (bits>>(7-yy) & 1) colour = fore; else colour = back;
        for (int yr=0; yr<scale; yr++) 
     886:	21 96       	adiw	r28, 0x01	; 1
     888:	80 91 29 01 	lds	r24, 0x0129
     88c:	90 91 2a 01 	lds	r25, 0x012A
     890:	c8 17       	cp	r28, r24
     892:	d9 07       	cpc	r29, r25
     894:	84 f3       	brlt	.-32     	; 0x876 <PlotChar+0xe4>
     896:	08 94       	sec
     898:	e1 08       	sbc	r14, r1
     89a:	f1 08       	sbc	r15, r1
  for (int xx=0; xx<6; xx++) 
  {
    int bits = pgm_read_byte(&CharMap[c-32][xx]);
    for (int xr=0; xr<scale; xr++) 
    {
      for (int yy=0; yy<8; yy++) 
     89c:	ff ef       	ldi	r31, 0xFF	; 255
     89e:	ef 16       	cp	r14, r31
     8a0:	ff ef       	ldi	r31, 0xFF	; 255
     8a2:	ff 06       	cpc	r15, r31
     8a4:	71 f6       	brne	.-100    	; 0x842 <PlotChar+0xb0>
  Command4(RASET, 0, xoff+x_0, 0, xoff+x_0+6*scale-1);
  Command(RAMWR);
  for (int xx=0; xx<6; xx++) 
  {
    int bits = pgm_read_byte(&CharMap[c-32][xx]);
    for (int xr=0; xr<scale; xr++) 
     8a6:	08 94       	sec
     8a8:	a1 1c       	adc	r10, r1
     8aa:	b1 1c       	adc	r11, r1
     8ac:	40 91 29 01 	lds	r20, 0x0129
     8b0:	50 91 2a 01 	lds	r21, 0x012A
     8b4:	a4 16       	cp	r10, r20
     8b6:	b5 06       	cpc	r11, r21
     8b8:	0c f2       	brlt	.-126    	; 0x83c <PlotChar+0xaa>
     8ba:	08 94       	sec
     8bc:	c1 1c       	adc	r12, r1
     8be:	d1 1c       	adc	r13, r1
  int colour;
  PINB = 1<<CS;                            // cs low
  Command4(CASET, 0, yoff+y_0, 0, yoff+y_0+8*scale-1);
  Command4(RASET, 0, xoff+x_0, 0, xoff+x_0+6*scale-1);
  Command(RAMWR);
  for (int xx=0; xx<6; xx++) 
     8c0:	c4 14       	cp	r12, r4
     8c2:	d5 04       	cpc	r13, r5
     8c4:	09 f0       	breq	.+2      	; 0x8c8 <PlotChar+0x136>
     8c6:	b3 cf       	rjmp	.-154    	; 0x82e <PlotChar+0x9c>
          Data(colour>>8); Data(colour & 0xFF);
        }
      }
    }
  }
  PINB = 1<<CS;                            // cs high
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	83 b9       	out	0x03, r24	; 3
  x_0 = x_0 + 6*scale;
     8cc:	9a 01       	movw	r18, r20
     8ce:	22 0f       	add	r18, r18
     8d0:	33 1f       	adc	r19, r19
     8d2:	24 0f       	add	r18, r20
     8d4:	35 1f       	adc	r19, r21
     8d6:	22 0f       	add	r18, r18
     8d8:	33 1f       	adc	r19, r19
     8da:	80 91 50 01 	lds	r24, 0x0150
     8de:	90 91 51 01 	lds	r25, 0x0151
     8e2:	82 0f       	add	r24, r18
     8e4:	93 1f       	adc	r25, r19
     8e6:	90 93 51 01 	sts	0x0151, r25
     8ea:	80 93 50 01 	sts	0x0150, r24
}
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	1f 91       	pop	r17
     8f4:	0f 91       	pop	r16
     8f6:	ff 90       	pop	r15
     8f8:	ef 90       	pop	r14
     8fa:	df 90       	pop	r13
     8fc:	cf 90       	pop	r12
     8fe:	bf 90       	pop	r11
     900:	af 90       	pop	r10
     902:	9f 90       	pop	r9
     904:	7f 90       	pop	r7
     906:	6f 90       	pop	r6
     908:	5f 90       	pop	r5
     90a:	4f 90       	pop	r4
     90c:	08 95       	ret

0000090e <PlotString>:
  DisplayOn();
  MoveTo(0,0);
}

void PlotString(const char str[]) 
{
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	ec 01       	movw	r28, r24
     914:	03 c0       	rjmp	.+6      	; 0x91c <PlotString+0xe>
	while (*str) PlotChar(*str++);
     916:	21 96       	adiw	r28, 0x01	; 1
     918:	0e 94 c9 03 	call	0x792	; 0x792 <PlotChar>
     91c:	88 81       	ld	r24, Y
     91e:	88 23       	and	r24, r24
     920:	d1 f7       	brne	.-12     	; 0x916 <PlotString+0x8>
}
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	08 95       	ret

00000928 <PlotText>:
  x_0 = x_0 + 6*scale;
}

// Plot text starting at the current plot position
void PlotText(PGM_P p) 
{
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	ec 01       	movw	r28, r24
     92e:	fe 01       	movw	r30, r28
  while (1) {
    char c = pgm_read_byte(p++);
     930:	21 96       	adiw	r28, 0x01	; 1
     932:	84 91       	lpm	r24, Z+
    if (c == 0) return;
     934:	88 23       	and	r24, r24
     936:	19 f0       	breq	.+6      	; 0x93e <PlotText+0x16>
    PlotChar(c);
     938:	0e 94 c9 03 	call	0x792	; 0x792 <PlotChar>
     93c:	f8 cf       	rjmp	.-16     	; 0x92e <PlotText+0x6>
  }
}
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	08 95       	ret

00000944 <FillRect>:
    if (e2 < dx) { err = err + dx; y_0 = y_0 + sy; }
  }
}

void FillRect (int w, int h) 
{
     944:	cf 92       	push	r12
     946:	df 92       	push	r13
     948:	ef 92       	push	r14
     94a:	ff 92       	push	r15
     94c:	0f 93       	push	r16
     94e:	1f 93       	push	r17
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
     954:	7c 01       	movw	r14, r24
     956:	6b 01       	movw	r12, r22
  PINB = 1<<CS;                            // cs low
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	83 b9       	out	0x03, r24	; 3
  Command4(CASET, 0, y_0+yoff, 0, y_0+yoff+h-1);
     95c:	40 91 52 01 	lds	r20, 0x0152
     960:	04 2f       	mov	r16, r20
     962:	06 0f       	add	r16, r22
     964:	8a e2       	ldi	r24, 0x2A	; 42
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	4f 5f       	subi	r20, 0xFF	; 255
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	0e 94 8b 03 	call	0x716	; 0x716 <Command4>
  Command4(RASET, 0, x_0+xoff, 0, x_0+xoff+w-1);
     970:	40 91 50 01 	lds	r20, 0x0150
     974:	4f 5f       	subi	r20, 0xFF	; 255
     976:	04 2f       	mov	r16, r20
     978:	0e 0d       	add	r16, r14
     97a:	8b e2       	ldi	r24, 0x2B	; 43
     97c:	60 e0       	ldi	r22, 0x00	; 0
     97e:	4f 5f       	subi	r20, 0xFF	; 255
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	0e 94 8b 03 	call	0x716	; 0x716 <Command4>
  Command(RAMWR);
     986:	8c e2       	ldi	r24, 0x2C	; 44
     988:	0e 94 af 03 	call	0x75e	; 0x75e <Command>
  for (int p=0; p<w*h*2; p++) {
     98c:	ee 0c       	add	r14, r14
     98e:	ff 1c       	adc	r15, r15
     990:	ec 9c       	mul	r14, r12
     992:	80 01       	movw	r16, r0
     994:	ed 9c       	mul	r14, r13
     996:	10 0d       	add	r17, r0
     998:	fc 9c       	mul	r15, r12
     99a:	10 0d       	add	r17, r0
     99c:	11 24       	eor	r1, r1
     99e:	c0 e0       	ldi	r28, 0x00	; 0
     9a0:	d0 e0       	ldi	r29, 0x00	; 0
     9a2:	0b c0       	rjmp	.+22     	; 0x9ba <FillRect+0x76>
 int scale = 1;     // Text scale

// Send a byte to the display
void Data (uint8_t d) 
{
	SPI_MasterTransmit(d);
     9a4:	80 91 28 01 	lds	r24, 0x0128
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
{
  PINB = 1<<CS;                            // cs low
  Command4(CASET, 0, y_0+yoff, 0, y_0+yoff+h-1);
  Command4(RASET, 0, x_0+xoff, 0, x_0+xoff+w-1);
  Command(RAMWR);
  for (int p=0; p<w*h*2; p++) {
     9ae:	80 91 27 01 	lds	r24, 0x0127
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
     9b8:	21 96       	adiw	r28, 0x01	; 1
     9ba:	c0 17       	cp	r28, r16
     9bc:	d1 07       	cpc	r29, r17
     9be:	94 f3       	brlt	.-28     	; 0x9a4 <FillRect+0x60>
    Data(fore>>8); Data(fore & 0xff);
  }
  PINB = 1<<CS;                            // cs high
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	83 b9       	out	0x03, r24	; 3
}
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	ff 90       	pop	r15
     9ce:	ef 90       	pop	r14
     9d0:	df 90       	pop	r13
     9d2:	cf 90       	pop	r12
     9d4:	08 95       	ret

000009d6 <PlotPoint>:
  x_0 = x; y_0 = y;
}

// Plot point at x,y
void PlotPoint (int x, int y) 
{
     9d6:	ff 92       	push	r15
     9d8:	0f 93       	push	r16
     9da:	1f 93       	push	r17
     9dc:	18 2f       	mov	r17, r24
     9de:	06 2f       	mov	r16, r22
  PINB = 1<<CS;                            // cs low
     9e0:	ff 24       	eor	r15, r15
     9e2:	f3 94       	inc	r15
     9e4:	f3 b8       	out	0x03, r15	; 3
  Command4(CASET, 0, yoff+y, 0, yoff+y);
     9e6:	0f 5f       	subi	r16, 0xFF	; 255
     9e8:	8a e2       	ldi	r24, 0x2A	; 42
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	40 2f       	mov	r20, r16
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	0e 94 8b 03 	call	0x716	; 0x716 <Command4>
  Command4(RASET, 0, xoff+x, 0, xoff+x);
     9f4:	1e 5f       	subi	r17, 0xFE	; 254
     9f6:	8b e2       	ldi	r24, 0x2B	; 43
     9f8:	60 e0       	ldi	r22, 0x00	; 0
     9fa:	41 2f       	mov	r20, r17
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	01 2f       	mov	r16, r17
     a00:	0e 94 8b 03 	call	0x716	; 0x716 <Command4>
  Command(RAMWR); Data(fore>>8); Data(fore & 0xff);
     a04:	8c e2       	ldi	r24, 0x2C	; 44
     a06:	0e 94 af 03 	call	0x75e	; 0x75e <Command>
 int scale = 1;     // Text scale

// Send a byte to the display
void Data (uint8_t d) 
{
	SPI_MasterTransmit(d);
     a0a:	80 91 28 01 	lds	r24, 0x0128
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
{
  PINB = 1<<CS;                            // cs low
  Command4(CASET, 0, yoff+y, 0, yoff+y);
  Command4(RASET, 0, xoff+x, 0, xoff+x);
  Command(RAMWR); Data(fore>>8); Data(fore & 0xff);
  PINB = 1<<CS;                            // cs high
     a14:	80 91 27 01 	lds	r24, 0x0127
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
     a1e:	f3 b8       	out	0x03, r15	; 3
}
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	ff 90       	pop	r15
     a26:	08 95       	ret

00000a28 <glcd_draw_circle>:
}



void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r)
{                  
     a28:	2f 92       	push	r2
     a2a:	3f 92       	push	r3
     a2c:	4f 92       	push	r4
     a2e:	5f 92       	push	r5
     a30:	6f 92       	push	r6
     a32:	7f 92       	push	r7
     a34:	8f 92       	push	r8
     a36:	9f 92       	push	r9
     a38:	af 92       	push	r10
     a3a:	bf 92       	push	r11
     a3c:	cf 92       	push	r12
     a3e:	df 92       	push	r13
     a40:	ef 92       	push	r14
     a42:	ff 92       	push	r15
     a44:	0f 93       	push	r16
     a46:	1f 93       	push	r17
     a48:	df 93       	push	r29
     a4a:	cf 93       	push	r28
     a4c:	cd b7       	in	r28, 0x3d	; 61
     a4e:	de b7       	in	r29, 0x3e	; 62
     a50:	2a 97       	sbiw	r28, 0x0a	; 10
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	f8 94       	cli
     a56:	de bf       	out	0x3e, r29	; 62
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	cd bf       	out	0x3d, r28	; 61
          int8_t f = 1 - r;
     a5c:	55 24       	eor	r5, r5
     a5e:	53 94       	inc	r5
     a60:	54 1a       	sub	r5, r20
          int8_t ddF_x = 1;
          int8_t ddF_y = -2 * r;
     a62:	04 2f       	mov	r16, r20
     a64:	10 e0       	ldi	r17, 0x00	; 0
     a66:	98 01       	movw	r18, r16
     a68:	22 0f       	add	r18, r18
     a6a:	33 1f       	adc	r19, r19
     a6c:	22 2e       	mov	r2, r18
     a6e:	21 94       	neg	r2
          int8_t x = 0;
          int8_t y = r;
     a70:	34 2e       	mov	r3, r20
         
         //  glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
           
         PlotPoint(x0, y0+r);
     a72:	68 2e       	mov	r6, r24
     a74:	77 24       	eor	r7, r7
     a76:	86 2e       	mov	r8, r22
     a78:	99 24       	eor	r9, r9
     a7a:	b8 01       	movw	r22, r16
     a7c:	68 0d       	add	r22, r8
     a7e:	79 1d       	adc	r23, r9
     a80:	c3 01       	movw	r24, r6
     a82:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <PlotPoint>
          PlotPoint(x0, y0-r);
     a86:	b4 01       	movw	r22, r8
     a88:	60 1b       	sub	r22, r16
     a8a:	71 0b       	sbc	r23, r17
     a8c:	c3 01       	movw	r24, r6
     a8e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <PlotPoint>
           PlotPoint(x0+r, y0);
     a92:	c8 01       	movw	r24, r16
     a94:	86 0d       	add	r24, r6
     a96:	97 1d       	adc	r25, r7
     a98:	b4 01       	movw	r22, r8
     a9a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <PlotPoint>
          PlotPoint(x0-r, y0);
     a9e:	c3 01       	movw	r24, r6
     aa0:	80 1b       	sub	r24, r16
     aa2:	91 0b       	sbc	r25, r17
     aa4:	b4 01       	movw	r22, r8
     aa6:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <PlotPoint>
     aaa:	1a 86       	std	Y+10, r1	; 0x0a
     aac:	19 86       	std	Y+9, r1	; 0x09
     aae:	43 e0       	ldi	r20, 0x03	; 3
     ab0:	44 2e       	mov	r4, r20
}



void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r)
{                  
     ab2:	c3 01       	movw	r24, r6
     ab4:	01 96       	adiw	r24, 0x01	; 1
     ab6:	9a 83       	std	Y+2, r25	; 0x02
     ab8:	89 83       	std	Y+1, r24	; 0x01
                   }
                   x++;
                   ddF_x += 2;
                   f += ddF_x;
                   
                   PlotPoint(x0 + x, y0 + y);
     aba:	f3 01       	movw	r30, r6
     abc:	31 97       	sbiw	r30, 0x01	; 1
     abe:	fc 83       	std	Y+4, r31	; 0x04
     ac0:	eb 83       	std	Y+3, r30	; 0x03
}



void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r)
{                  
     ac2:	c4 01       	movw	r24, r8
     ac4:	01 96       	adiw	r24, 0x01	; 1
     ac6:	9e 83       	std	Y+6, r25	; 0x06
     ac8:	8d 83       	std	Y+5, r24	; 0x05
                   PlotPoint(x0 - x, y0 + y);
                   PlotPoint(x0 + x, y0 - y);
                   PlotPoint(x0 - x, y0 - y);
                   
                   PlotPoint(x0 + y, y0 + x);
                   PlotPoint(x0 - y, y0 + x);
     aca:	f4 01       	movw	r30, r8
     acc:	31 97       	sbiw	r30, 0x01	; 1
     ace:	f8 87       	std	Y+8, r31	; 0x08
     ad0:	ef 83       	std	Y+7, r30	; 0x07
     ad2:	57 c0       	rjmp	.+174    	; 0xb82 <glcd_draw_circle+0x15a>
          PlotPoint(x0, y0-r);
           PlotPoint(x0+r, y0);
          PlotPoint(x0-r, y0);
          
           while (x<y) {
                   if (f >= 0) {
     ad4:	57 fc       	sbrc	r5, 7
     ad6:	04 c0       	rjmp	.+8      	; 0xae0 <glcd_draw_circle+0xb8>
                           y--;
     ad8:	3a 94       	dec	r3
                           ddF_y += 2;
     ada:	f2 e0       	ldi	r31, 0x02	; 2
     adc:	2f 0e       	add	r2, r31
                           f += ddF_y;
     ade:	52 0c       	add	r5, r2
                   }
                   x++;
                   ddF_x += 2;
                   f += ddF_x;
     ae0:	54 0c       	add	r5, r4
}



void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r)
{                  
     ae2:	a9 80       	ldd	r10, Y+1	; 0x01
     ae4:	ba 80       	ldd	r11, Y+2	; 0x02
     ae6:	89 85       	ldd	r24, Y+9	; 0x09
     ae8:	9a 85       	ldd	r25, Y+10	; 0x0a
     aea:	a8 0e       	add	r10, r24
     aec:	b9 1e       	adc	r11, r25
                   }
                   x++;
                   ddF_x += 2;
                   f += ddF_x;
                   
                   PlotPoint(x0 + x, y0 + y);
     aee:	e3 2c       	mov	r14, r3
     af0:	ff 24       	eor	r15, r15
     af2:	e7 fc       	sbrc	r14, 7
     af4:	f0 94       	com	r15
     af6:	87 01       	movw	r16, r14
     af8:	08 0d       	add	r16, r8
     afa:	19 1d       	adc	r17, r9
     afc:	c5 01       	movw	r24, r10
     afe:	b8 01       	movw	r22, r16
     b00:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <PlotPoint>
     b04:	cb 80       	ldd	r12, Y+3	; 0x03
     b06:	dc 80       	ldd	r13, Y+4	; 0x04
     b08:	e9 85       	ldd	r30, Y+9	; 0x09
     b0a:	fa 85       	ldd	r31, Y+10	; 0x0a
     b0c:	ce 1a       	sub	r12, r30
     b0e:	df 0a       	sbc	r13, r31
                   PlotPoint(x0 - x, y0 + y);
     b10:	c6 01       	movw	r24, r12
     b12:	b8 01       	movw	r22, r16
     b14:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <PlotPoint>
                   PlotPoint(x0 + x, y0 - y);
     b18:	84 01       	movw	r16, r8
     b1a:	0e 19       	sub	r16, r14
     b1c:	1f 09       	sbc	r17, r15
     b1e:	c5 01       	movw	r24, r10
     b20:	b8 01       	movw	r22, r16
     b22:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <PlotPoint>
                   PlotPoint(x0 - x, y0 - y);
     b26:	c6 01       	movw	r24, r12
     b28:	b8 01       	movw	r22, r16
     b2a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <PlotPoint>
                   
                   PlotPoint(x0 + y, y0 + x);
     b2e:	67 01       	movw	r12, r14
     b30:	c6 0c       	add	r12, r6
     b32:	d7 1c       	adc	r13, r7
}



void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r)
{                  
     b34:	0d 81       	ldd	r16, Y+5	; 0x05
     b36:	1e 81       	ldd	r17, Y+6	; 0x06
     b38:	89 85       	ldd	r24, Y+9	; 0x09
     b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b3c:	08 0f       	add	r16, r24
     b3e:	19 1f       	adc	r17, r25
                   PlotPoint(x0 + x, y0 + y);
                   PlotPoint(x0 - x, y0 + y);
                   PlotPoint(x0 + x, y0 - y);
                   PlotPoint(x0 - x, y0 - y);
                   
                   PlotPoint(x0 + y, y0 + x);
     b40:	c6 01       	movw	r24, r12
     b42:	b8 01       	movw	r22, r16
     b44:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <PlotPoint>
                   PlotPoint(x0 - y, y0 + x);
     b48:	f3 01       	movw	r30, r6
     b4a:	ee 19       	sub	r30, r14
     b4c:	ff 09       	sbc	r31, r15
     b4e:	7f 01       	movw	r14, r30
     b50:	cf 01       	movw	r24, r30
     b52:	b8 01       	movw	r22, r16
     b54:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <PlotPoint>
     b58:	0f 81       	ldd	r16, Y+7	; 0x07
     b5a:	18 85       	ldd	r17, Y+8	; 0x08
     b5c:	89 85       	ldd	r24, Y+9	; 0x09
     b5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     b60:	08 1b       	sub	r16, r24
     b62:	19 0b       	sbc	r17, r25
                   PlotPoint(x0 + y, y0 - x);
     b64:	c6 01       	movw	r24, r12
     b66:	b8 01       	movw	r22, r16
     b68:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <PlotPoint>
                   PlotPoint(x0 - y, y0 - x);
     b6c:	c7 01       	movw	r24, r14
     b6e:	b8 01       	movw	r22, r16
     b70:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <PlotPoint>
     b74:	e9 85       	ldd	r30, Y+9	; 0x09
     b76:	fa 85       	ldd	r31, Y+10	; 0x0a
     b78:	31 96       	adiw	r30, 0x01	; 1
     b7a:	fa 87       	std	Y+10, r31	; 0x0a
     b7c:	e9 87       	std	Y+9, r30	; 0x09
     b7e:	f2 e0       	ldi	r31, 0x02	; 2
     b80:	4f 0e       	add	r4, r31
         PlotPoint(x0, y0+r);
          PlotPoint(x0, y0-r);
           PlotPoint(x0+r, y0);
          PlotPoint(x0-r, y0);
          
           while (x<y) {
     b82:	89 85       	ldd	r24, Y+9	; 0x09
     b84:	83 15       	cp	r24, r3
     b86:	0c f4       	brge	.+2      	; 0xb8a <glcd_draw_circle+0x162>
     b88:	a5 cf       	rjmp	.-182    	; 0xad4 <glcd_draw_circle+0xac>
                   PlotPoint(x0 - y, y0 + x);
                   PlotPoint(x0 + y, y0 - x);
                   PlotPoint(x0 - y, y0 - x);
                   
           }
   }//end of draw circle
     b8a:	2a 96       	adiw	r28, 0x0a	; 10
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	f8 94       	cli
     b90:	de bf       	out	0x3e, r29	; 62
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	cd bf       	out	0x3d, r28	; 61
     b96:	cf 91       	pop	r28
     b98:	df 91       	pop	r29
     b9a:	1f 91       	pop	r17
     b9c:	0f 91       	pop	r16
     b9e:	ff 90       	pop	r15
     ba0:	ef 90       	pop	r14
     ba2:	df 90       	pop	r13
     ba4:	cf 90       	pop	r12
     ba6:	bf 90       	pop	r11
     ba8:	af 90       	pop	r10
     baa:	9f 90       	pop	r9
     bac:	8f 90       	pop	r8
     bae:	7f 90       	pop	r7
     bb0:	6f 90       	pop	r6
     bb2:	5f 90       	pop	r5
     bb4:	4f 90       	pop	r4
     bb6:	3f 90       	pop	r3
     bb8:	2f 90       	pop	r2
     bba:	08 95       	ret

00000bbc <DrawTo>:
  PINB = 1<<CS;                            // cs high
}

// Draw a line to x,y
void DrawTo (int x, int y) 
{
     bbc:	4f 92       	push	r4
     bbe:	5f 92       	push	r5
     bc0:	6f 92       	push	r6
     bc2:	7f 92       	push	r7
     bc4:	8f 92       	push	r8
     bc6:	9f 92       	push	r9
     bc8:	af 92       	push	r10
     bca:	bf 92       	push	r11
     bcc:	cf 92       	push	r12
     bce:	df 92       	push	r13
     bd0:	ef 92       	push	r14
     bd2:	ff 92       	push	r15
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	5c 01       	movw	r10, r24
     bde:	6b 01       	movw	r12, r22
  int sx, sy, e2, err;
  int dx = abs(x - x_0);
     be0:	20 91 50 01 	lds	r18, 0x0150
     be4:	30 91 51 01 	lds	r19, 0x0151
     be8:	7c 01       	movw	r14, r24
     bea:	e2 1a       	sub	r14, r18
     bec:	f3 0a       	sbc	r15, r19
     bee:	f7 fe       	sbrs	r15, 7
     bf0:	04 c0       	rjmp	.+8      	; 0xbfa <DrawTo+0x3e>
     bf2:	f0 94       	com	r15
     bf4:	e1 94       	neg	r14
     bf6:	f1 08       	sbc	r15, r1
     bf8:	f3 94       	inc	r15
  int dy = abs(y - y_0);
     bfa:	80 91 52 01 	lds	r24, 0x0152
     bfe:	90 91 53 01 	lds	r25, 0x0153
     c02:	86 01       	movw	r16, r12
     c04:	08 1b       	sub	r16, r24
     c06:	19 0b       	sbc	r17, r25
     c08:	17 ff       	sbrs	r17, 7
     c0a:	03 c0       	rjmp	.+6      	; 0xc12 <DrawTo+0x56>
     c0c:	10 95       	com	r17
     c0e:	01 95       	neg	r16
     c10:	1f 4f       	sbci	r17, 0xFF	; 255
  if (x_0 < x) sx = 1; else sx = -1;
     c12:	2a 15       	cp	r18, r10
     c14:	3b 05       	cpc	r19, r11
     c16:	24 f0       	brlt	.+8      	; 0xc20 <DrawTo+0x64>
     c18:	66 24       	eor	r6, r6
     c1a:	6a 94       	dec	r6
     c1c:	76 2c       	mov	r7, r6
     c1e:	03 c0       	rjmp	.+6      	; 0xc26 <DrawTo+0x6a>
     c20:	e1 e0       	ldi	r30, 0x01	; 1
     c22:	6e 2e       	mov	r6, r30
     c24:	71 2c       	mov	r7, r1
  if (y_0 < y) sy = 1; else sy = -1;
     c26:	8c 15       	cp	r24, r12
     c28:	9d 05       	cpc	r25, r13
     c2a:	24 f0       	brlt	.+8      	; 0xc34 <DrawTo+0x78>
     c2c:	88 24       	eor	r8, r8
     c2e:	8a 94       	dec	r8
     c30:	98 2c       	mov	r9, r8
     c32:	03 c0       	rjmp	.+6      	; 0xc3a <DrawTo+0x7e>
     c34:	71 e0       	ldi	r23, 0x01	; 1
     c36:	87 2e       	mov	r8, r23
     c38:	91 2c       	mov	r9, r1
  err = dx - dy;
     c3a:	e7 01       	movw	r28, r14
     c3c:	c0 1b       	sub	r28, r16
     c3e:	d1 0b       	sbc	r29, r17
  for (;;) {
    PlotPoint(x_0, y_0);
    if (x_0==x && y_0==y) return;
    e2 = err<<1;
    if (e2 > -dy) { err = err - dy; x_0 = x_0 + sx; }
     c40:	44 24       	eor	r4, r4
     c42:	55 24       	eor	r5, r5
     c44:	40 1a       	sub	r4, r16
     c46:	51 0a       	sbc	r5, r17
  int dy = abs(y - y_0);
  if (x_0 < x) sx = 1; else sx = -1;
  if (y_0 < y) sy = 1; else sy = -1;
  err = dx - dy;
  for (;;) {
    PlotPoint(x_0, y_0);
     c48:	60 91 52 01 	lds	r22, 0x0152
     c4c:	70 91 53 01 	lds	r23, 0x0153
     c50:	80 91 50 01 	lds	r24, 0x0150
     c54:	90 91 51 01 	lds	r25, 0x0151
     c58:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <PlotPoint>
    if (x_0==x && y_0==y) return;
     c5c:	20 91 50 01 	lds	r18, 0x0150
     c60:	30 91 51 01 	lds	r19, 0x0151
     c64:	2a 15       	cp	r18, r10
     c66:	3b 05       	cpc	r19, r11
     c68:	39 f4       	brne	.+14     	; 0xc78 <DrawTo+0xbc>
     c6a:	80 91 52 01 	lds	r24, 0x0152
     c6e:	90 91 53 01 	lds	r25, 0x0153
     c72:	8c 15       	cp	r24, r12
     c74:	9d 05       	cpc	r25, r13
     c76:	f1 f0       	breq	.+60     	; 0xcb4 <DrawTo+0xf8>
    e2 = err<<1;
     c78:	ce 01       	movw	r24, r28
     c7a:	88 0f       	add	r24, r24
     c7c:	99 1f       	adc	r25, r25
    if (e2 > -dy) { err = err - dy; x_0 = x_0 + sx; }
     c7e:	48 16       	cp	r4, r24
     c80:	59 06       	cpc	r5, r25
     c82:	44 f4       	brge	.+16     	; 0xc94 <DrawTo+0xd8>
     c84:	c0 1b       	sub	r28, r16
     c86:	d1 0b       	sbc	r29, r17
     c88:	26 0d       	add	r18, r6
     c8a:	37 1d       	adc	r19, r7
     c8c:	30 93 51 01 	sts	0x0151, r19
     c90:	20 93 50 01 	sts	0x0150, r18
    if (e2 < dx) { err = err + dx; y_0 = y_0 + sy; }
     c94:	8e 15       	cp	r24, r14
     c96:	9f 05       	cpc	r25, r15
     c98:	bc f6       	brge	.-82     	; 0xc48 <DrawTo+0x8c>
     c9a:	ce 0d       	add	r28, r14
     c9c:	df 1d       	adc	r29, r15
     c9e:	80 91 52 01 	lds	r24, 0x0152
     ca2:	90 91 53 01 	lds	r25, 0x0153
     ca6:	88 0d       	add	r24, r8
     ca8:	99 1d       	adc	r25, r9
     caa:	90 93 53 01 	sts	0x0153, r25
     cae:	80 93 52 01 	sts	0x0152, r24
     cb2:	ca cf       	rjmp	.-108    	; 0xc48 <DrawTo+0x8c>
  }
}
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	ff 90       	pop	r15
     cbe:	ef 90       	pop	r14
     cc0:	df 90       	pop	r13
     cc2:	cf 90       	pop	r12
     cc4:	bf 90       	pop	r11
     cc6:	af 90       	pop	r10
     cc8:	9f 90       	pop	r9
     cca:	8f 90       	pop	r8
     ccc:	7f 90       	pop	r7
     cce:	6f 90       	pop	r6
     cd0:	5f 90       	pop	r5
     cd2:	4f 90       	pop	r4
     cd4:	08 95       	ret

00000cd6 <TestChart>:
}

// Move current plot position to x,y
void MoveTo (int x, int y) 
{
  x_0 = x; y_0 = y;
     cd6:	10 92 51 01 	sts	0x0151, r1
     cda:	10 92 50 01 	sts	0x0150, r1
     cde:	10 92 53 01 	sts	0x0153, r1
     ce2:	10 92 52 01 	sts	0x0152, r1
}

void TestChart (void) 
{
  MoveTo(0,0);
  DrawTo(xsize-1, 0); DrawTo(xsize-1, ysize-1);
     ce6:	8f e7       	ldi	r24, 0x7F	; 127
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	0e 94 de 05 	call	0xbbc	; 0xbbc <DrawTo>
     cf2:	8f e7       	ldi	r24, 0x7F	; 127
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	6f e7       	ldi	r22, 0x7F	; 127
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	0e 94 de 05 	call	0xbbc	; 0xbbc <DrawTo>
  DrawTo(0, ysize-1); DrawTo(0, 0);
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	6f e7       	ldi	r22, 0x7F	; 127
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	0e 94 de 05 	call	0xbbc	; 0xbbc <DrawTo>
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	60 e0       	ldi	r22, 0x00	; 0
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	0e 94 de 05 	call	0xbbc	; 0xbbc <DrawTo>
  scale=8;
     d16:	88 e0       	ldi	r24, 0x08	; 8
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	90 93 2a 01 	sts	0x012A, r25
     d1e:	80 93 29 01 	sts	0x0129, r24
}

// Move current plot position to x,y
void MoveTo (int x, int y) 
{
  x_0 = x; y_0 = y;
     d22:	8c e2       	ldi	r24, 0x2C	; 44
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	90 93 51 01 	sts	0x0151, r25
     d2a:	80 93 50 01 	sts	0x0150, r24
     d2e:	80 e2       	ldi	r24, 0x20	; 32
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	90 93 53 01 	sts	0x0153, r25
     d36:	80 93 52 01 	sts	0x0152, r24
{
  MoveTo(0,0);
  DrawTo(xsize-1, 0); DrawTo(xsize-1, ysize-1);
  DrawTo(0, ysize-1); DrawTo(0, 0);
  scale=8;
  MoveTo((xsize-40)/2, (ysize-64)/2); PlotChar('A');
     d3a:	81 e4       	ldi	r24, 0x41	; 65
     d3c:	0e 94 c9 03 	call	0x792	; 0x792 <PlotChar>
}
     d40:	08 95       	ret

00000d42 <ClearDisplay>:
  _delay_ms(100);
  PINB = 1<<CS;                            // cs high
}

void ClearDisplay (void) 
{
     d42:	0f 93       	push	r16
     d44:	1f 93       	push	r17
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
  PINB = 1<<CS;                            // cs low
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	83 b9       	out	0x03, r24	; 3
  Command4(CASET, yoff>>8, yoff, 0, yoff + ysize - 1);
     d4e:	8a e2       	ldi	r24, 0x2A	; 42
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	41 e0       	ldi	r20, 0x01	; 1
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	00 e8       	ldi	r16, 0x80	; 128
     d58:	0e 94 8b 03 	call	0x716	; 0x716 <Command4>
  Command4(RASET, xoff>>8, xoff, 0, xoff + xsize - 1);
     d5c:	8b e2       	ldi	r24, 0x2B	; 43
     d5e:	60 e0       	ldi	r22, 0x00	; 0
     d60:	42 e0       	ldi	r20, 0x02	; 2
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	01 e8       	ldi	r16, 0x81	; 129
     d66:	0e 94 8b 03 	call	0x716	; 0x716 <Command4>
  Command(0x3A); Data(0x03);               // 12-bit colour
     d6a:	8a e3       	ldi	r24, 0x3A	; 58
     d6c:	0e 94 af 03 	call	0x75e	; 0x75e <Command>
 int scale = 1;     // Text scale

// Send a byte to the display
void Data (uint8_t d) 
{
	SPI_MasterTransmit(d);
     d70:	83 e0       	ldi	r24, 0x03	; 3
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
{
  PINB = 1<<CS;                            // cs low
  Command4(CASET, yoff>>8, yoff, 0, yoff + ysize - 1);
  Command4(RASET, xoff>>8, xoff, 0, xoff + xsize - 1);
  Command(0x3A); Data(0x03);               // 12-bit colour
  Command(RAMWR);
     d78:	8c e2       	ldi	r24, 0x2C	; 44
     d7a:	0e 94 af 03 	call	0x75e	; 0x75e <Command>
     d7e:	00 e0       	ldi	r16, 0x00	; 0
     d80:	10 e0       	ldi	r17, 0x00	; 0
     d82:	0e c0       	rjmp	.+28     	; 0xda0 <ClearDisplay+0x5e>
 int scale = 1;     // Text scale

// Send a byte to the display
void Data (uint8_t d) 
{
	SPI_MasterTransmit(d);
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
  Command4(CASET, yoff>>8, yoff, 0, yoff + ysize - 1);
  Command4(RASET, xoff>>8, xoff, 0, xoff + xsize - 1);
  Command(0x3A); Data(0x03);               // 12-bit colour
  Command(RAMWR);
  for (int i=0; i<xsize/2; i++) {
    for (int j=0; j<ysize * 3; j++) 
     d8c:	21 96       	adiw	r28, 0x01	; 1
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	c0 38       	cpi	r28, 0x80	; 128
     d92:	d8 07       	cpc	r29, r24
     d94:	b9 f7       	brne	.-18     	; 0xd84 <ClearDisplay+0x42>
  PINB = 1<<CS;                            // cs low
  Command4(CASET, yoff>>8, yoff, 0, yoff + ysize - 1);
  Command4(RASET, xoff>>8, xoff, 0, xoff + xsize - 1);
  Command(0x3A); Data(0x03);               // 12-bit colour
  Command(RAMWR);
  for (int i=0; i<xsize/2; i++) {
     d96:	0f 5f       	subi	r16, 0xFF	; 255
     d98:	1f 4f       	sbci	r17, 0xFF	; 255
     d9a:	00 34       	cpi	r16, 0x40	; 64
     d9c:	11 05       	cpc	r17, r1
     d9e:	19 f0       	breq	.+6      	; 0xda6 <ClearDisplay+0x64>
     da0:	c0 e0       	ldi	r28, 0x00	; 0
     da2:	d0 e0       	ldi	r29, 0x00	; 0
     da4:	ef cf       	rjmp	.-34     	; 0xd84 <ClearDisplay+0x42>
    for (int j=0; j<ysize * 3; j++) 
    {
      Data(0);
    }
  }
  Command(0x3A); Data(0x05);               // Back to 16-bit colour
     da6:	8a e3       	ldi	r24, 0x3A	; 58
     da8:	0e 94 af 03 	call	0x75e	; 0x75e <Command>
 int scale = 1;     // Text scale

// Send a byte to the display
void Data (uint8_t d) 
{
	SPI_MasterTransmit(d);
     dac:	85 e0       	ldi	r24, 0x05	; 5
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
      Data(0);
    }
  }
  Command(0x3A); Data(0x05);               // Back to 16-bit colour
  //8-bit data bus for 16-bit/pixel (RGB 5-6-5-bit input), 65K-Colors, 3AH= “05h”
  PINB = 1<<CS;                            // cs high
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	83 b9       	out	0x03, r24	; 3
}
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	1f 91       	pop	r17
     dbe:	0f 91       	pop	r16
     dc0:	08 95       	ret

00000dc2 <InitDisplay>:
  
void InitDisplay (void) 
{
  //DDRB = 1<<dc | 1<<cs | 1<<mosi | 1<<sck; // All outputs
  //PORTB = 1<<sck | 1<<cs | 1<<dc;          // clk, dc, and cs high
  PINB = 1<<CS;                            // cs low
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	83 b9       	out	0x03, r24	; 3
  Command(0x01);                           // Software reset
     dc6:	0e 94 af 03 	call	0x75e	; 0x75e <Command>
     dca:	8c ed       	ldi	r24, 0xDC	; 220
     dcc:	95 e0       	ldi	r25, 0x05	; 5
     dce:	28 ec       	ldi	r18, 0xC8	; 200
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	f9 01       	movw	r30, r18
     dd4:	31 97       	sbiw	r30, 0x01	; 1
     dd6:	f1 f7       	brne	.-4      	; 0xdd4 <InitDisplay+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dd8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dda:	d9 f7       	brne	.-10     	; 0xdd2 <InitDisplay+0x10>
  _delay_ms(150);                              // _delay_ms 150 ms
  Command(0x11);                           // Out of sleep mode
     ddc:	81 e1       	ldi	r24, 0x11	; 17
     dde:	0e 94 af 03 	call	0x75e	; 0x75e <Command>
     de2:	88 e8       	ldi	r24, 0x88	; 136
     de4:	93 e1       	ldi	r25, 0x13	; 19
     de6:	28 ec       	ldi	r18, 0xC8	; 200
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	f9 01       	movw	r30, r18
     dec:	31 97       	sbiw	r30, 0x01	; 1
     dee:	f1 f7       	brne	.-4      	; 0xdec <InitDisplay+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df2:	d9 f7       	brne	.-10     	; 0xdea <InitDisplay+0x28>
  _delay_ms(500);                              // _delay_ms 500 ms
	Command(0x3A); Data(0x05);               // Set color mode - 16-bit color (rgb 5-6-5)
     df4:	8a e3       	ldi	r24, 0x3A	; 58
     df6:	0e 94 af 03 	call	0x75e	; 0x75e <Command>
 int scale = 1;     // Text scale

// Send a byte to the display
void Data (uint8_t d) 
{
	SPI_MasterTransmit(d);
     dfa:	85 e0       	ldi	r24, 0x05	; 5
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
  Command(0x01);                           // Software reset
  _delay_ms(150);                              // _delay_ms 150 ms
  Command(0x11);                           // Out of sleep mode
  _delay_ms(500);                              // _delay_ms 500 ms
	Command(0x3A); Data(0x05);               // Set color mode - 16-bit color (rgb 5-6-5)
   Command(0x20+invert);                    // Invert
     e02:	80 e2       	ldi	r24, 0x20	; 32
     e04:	0e 94 af 03 	call	0x75e	; 0x75e <Command>
  Command(0x36); Data(rotate<<5);          // Set orientation
     e08:	86 e3       	ldi	r24, 0x36	; 54
     e0a:	0e 94 af 03 	call	0x75e	; 0x75e <Command>
 int scale = 1;     // Text scale

// Send a byte to the display
void Data (uint8_t d) 
{
	SPI_MasterTransmit(d);
     e0e:	80 e6       	ldi	r24, 0x60	; 96
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
  Command(0x11);                           // Out of sleep mode
  _delay_ms(500);                              // _delay_ms 500 ms
	Command(0x3A); Data(0x05);               // Set color mode - 16-bit color (rgb 5-6-5)
   Command(0x20+invert);                    // Invert
  Command(0x36); Data(rotate<<5);          // Set orientation
  PINB = 1<<CS;                            // cs high
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	83 b9       	out	0x03, r24	; 3
}
     e1a:	08 95       	ret

00000e1c <setup>:

// Setup **********************************************

void setup(void) 
{
  InitDisplay();
     e1c:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <InitDisplay>
  ClearDisplay();
     e20:	0e 94 a1 06 	call	0xd42	; 0xd42 <ClearDisplay>
  DisplayOn();
     e24:	0e 94 b8 03 	call	0x770	; 0x770 <DisplayOn>
}

// Move current plot position to x,y
void MoveTo (int x, int y) 
{
  x_0 = x; y_0 = y;
     e28:	10 92 51 01 	sts	0x0151, r1
     e2c:	10 92 50 01 	sts	0x0150, r1
     e30:	10 92 53 01 	sts	0x0153, r1
     e34:	10 92 52 01 	sts	0x0152, r1
{
  InitDisplay();
  ClearDisplay();
  DisplayOn();
  MoveTo(0,0);
}
     e38:	08 95       	ret

00000e3a <TWIInit>:
#include "_24LCxx.h"

void TWIInit(void)
{
	TWSR = 0x00;
     e3a:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = 0x0C;
     e3e:	8c e0       	ldi	r24, 0x0C	; 12
     e40:	80 93 b8 00 	sts	0x00B8, r24
	TWCR = (1<<TWEN);
     e44:	84 e0       	ldi	r24, 0x04	; 4
     e46:	80 93 bc 00 	sts	0x00BC, r24
}
     e4a:	08 95       	ret

00000e4c <TWIStart>:

void TWIStart(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     e4c:	84 ea       	ldi	r24, 0xA4	; 164
     e4e:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
     e52:	80 91 bc 00 	lds	r24, 0x00BC
     e56:	87 ff       	sbrs	r24, 7
     e58:	fc cf       	rjmp	.-8      	; 0xe52 <TWIStart+0x6>
}
     e5a:	08 95       	ret

00000e5c <TWIStop>:

void TWIStop(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     e5c:	84 e9       	ldi	r24, 0x94	; 148
     e5e:	80 93 bc 00 	sts	0x00BC, r24
}
     e62:	08 95       	ret

00000e64 <TWIWrite>:

void TWIWrite(uint8_t data)
{
	TWDR = data;
     e64:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = ((1<<TWINT) | (1<<TWEN));
     e68:	84 e8       	ldi	r24, 0x84	; 132
     e6a:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
     e6e:	80 91 bc 00 	lds	r24, 0x00BC
     e72:	87 ff       	sbrs	r24, 7
     e74:	fc cf       	rjmp	.-8      	; 0xe6e <TWIWrite+0xa>
}
     e76:	08 95       	ret

00000e78 <TWIReadACK>:

uint8_t TWIReadACK(void)
{
	TWCR = ((1<<TWINT) | (1<<TWEN)| (1<<TWEA));
     e78:	84 ec       	ldi	r24, 0xC4	; 196
     e7a:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
     e7e:	80 91 bc 00 	lds	r24, 0x00BC
     e82:	87 ff       	sbrs	r24, 7
     e84:	fc cf       	rjmp	.-8      	; 0xe7e <TWIReadACK+0x6>
	return TWDR;
     e86:	80 91 bb 00 	lds	r24, 0x00BB
}
     e8a:	08 95       	ret

00000e8c <TWIReadNACK>:

uint8_t TWIReadNACK(void)
{
	TWCR = ((1<<TWINT) | (1<<TWEN));
     e8c:	84 e8       	ldi	r24, 0x84	; 132
     e8e:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
     e92:	80 91 bc 00 	lds	r24, 0x00BC
     e96:	87 ff       	sbrs	r24, 7
     e98:	fc cf       	rjmp	.-8      	; 0xe92 <TWIReadNACK+0x6>
	return TWDR;
     e9a:	80 91 bb 00 	lds	r24, 0x00BB
}
     e9e:	08 95       	ret

00000ea0 <TWIReadStatus>:

uint8_t TWIReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
     ea0:	80 91 b9 00 	lds	r24, 0x00B9
	return status;
}
     ea4:	88 7f       	andi	r24, 0xF8	; 248
     ea6:	08 95       	ret

00000ea8 <TWI_EEWrite8>:

uint8_t TWI_EEWrite8(uint16_t adress, uint8_t data)
{
     ea8:	28 2f       	mov	r18, r24
	TWCR = (1<<TWEN);
}

void TWIStart(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     eaa:	84 ea       	ldi	r24, 0xA4	; 164
     eac:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
     eb0:	80 91 bc 00 	lds	r24, 0x00BC
     eb4:	87 ff       	sbrs	r24, 7
     eb6:	fc cf       	rjmp	.-8      	; 0xeb0 <TWI_EEWrite8+0x8>
}

uint8_t TWIReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
     eb8:	80 91 b9 00 	lds	r24, 0x00B9
     ebc:	88 7f       	andi	r24, 0xF8	; 248
uint8_t TWI_EEWrite8(uint16_t adress, uint8_t data)
{
	uint8_t status = 0;
	TWIStart();
	status = TWIReadStatus();
	if(status != 0x08)
     ebe:	88 30       	cpi	r24, 0x08	; 8
     ec0:	e9 f5       	brne	.+122    	; 0xf3c <TWI_EEWrite8+0x94>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void TWIWrite(uint8_t data)
{
	TWDR = data;
     ec2:	80 ea       	ldi	r24, 0xA0	; 160
     ec4:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = ((1<<TWINT) | (1<<TWEN));
     ec8:	84 e8       	ldi	r24, 0x84	; 132
     eca:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
     ece:	80 91 bc 00 	lds	r24, 0x00BC
     ed2:	87 ff       	sbrs	r24, 7
     ed4:	fc cf       	rjmp	.-8      	; 0xece <TWI_EEWrite8+0x26>
}

uint8_t TWIReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
     ed6:	80 91 b9 00 	lds	r24, 0x00B9
     eda:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	TWIWrite(ID);
	status = TWIReadStatus();
	if(status != 0x18)
     edc:	88 31       	cpi	r24, 0x18	; 24
     ede:	71 f5       	brne	.+92     	; 0xf3c <TWI_EEWrite8+0x94>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void TWIWrite(uint8_t data)
{
	TWDR = data;
     ee0:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = ((1<<TWINT) | (1<<TWEN));
     ee4:	84 e8       	ldi	r24, 0x84	; 132
     ee6:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
     eea:	80 91 bc 00 	lds	r24, 0x00BC
     eee:	87 ff       	sbrs	r24, 7
     ef0:	fc cf       	rjmp	.-8      	; 0xeea <TWI_EEWrite8+0x42>
}

uint8_t TWIReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
     ef2:	80 91 b9 00 	lds	r24, 0x00B9
     ef6:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	TWIWrite((uint8_t)(adress >> 8));
	status = TWIReadStatus();
	if(status != 0x28)
     ef8:	88 32       	cpi	r24, 0x28	; 40
     efa:	01 f5       	brne	.+64     	; 0xf3c <TWI_EEWrite8+0x94>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void TWIWrite(uint8_t data)
{
	TWDR = data;
     efc:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = ((1<<TWINT) | (1<<TWEN));
     f00:	84 e8       	ldi	r24, 0x84	; 132
     f02:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
     f06:	80 91 bc 00 	lds	r24, 0x00BC
     f0a:	87 ff       	sbrs	r24, 7
     f0c:	fc cf       	rjmp	.-8      	; 0xf06 <TWI_EEWrite8+0x5e>
}

uint8_t TWIReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
     f0e:	80 91 b9 00 	lds	r24, 0x00B9
     f12:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	TWIWrite((uint8_t)(adress));
	status = TWIReadStatus();
	if(status != 0x28)
     f14:	88 32       	cpi	r24, 0x28	; 40
     f16:	91 f4       	brne	.+36     	; 0xf3c <TWI_EEWrite8+0x94>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void TWIWrite(uint8_t data)
{
	TWDR = data;
     f18:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = ((1<<TWINT) | (1<<TWEN));
     f1c:	84 e8       	ldi	r24, 0x84	; 132
     f1e:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
     f22:	80 91 bc 00 	lds	r24, 0x00BC
     f26:	87 ff       	sbrs	r24, 7
     f28:	fc cf       	rjmp	.-8      	; 0xf22 <TWI_EEWrite8+0x7a>
}

uint8_t TWIReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
     f2a:	80 91 b9 00 	lds	r24, 0x00B9
     f2e:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	TWIWrite(data);
	status = TWIReadStatus();
	if(status != 0x28)
     f30:	88 32       	cpi	r24, 0x28	; 40
     f32:	21 f4       	brne	.+8      	; 0xf3c <TWI_EEWrite8+0x94>
	while((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     f34:	84 e9       	ldi	r24, 0x94	; 148
     f36:	80 93 bc 00 	sts	0x00BC, r24
     f3a:	80 e0       	ldi	r24, 0x00	; 0
		return status;
	}
	
	TWIStop();
	return 0x00;
}
     f3c:	08 95       	ret

00000f3e <TWI_EERead8>:

uint8_t TWI_EERead8(uint16_t adress, uint8_t *data)
{
     f3e:	28 2f       	mov	r18, r24
     f40:	fb 01       	movw	r30, r22
	TWCR = (1<<TWEN);
}

void TWIStart(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     f42:	84 ea       	ldi	r24, 0xA4	; 164
     f44:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
     f48:	80 91 bc 00 	lds	r24, 0x00BC
     f4c:	87 ff       	sbrs	r24, 7
     f4e:	fc cf       	rjmp	.-8      	; 0xf48 <TWI_EERead8+0xa>
}

uint8_t TWIReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
     f50:	80 91 b9 00 	lds	r24, 0x00B9
     f54:	88 7f       	andi	r24, 0xF8	; 248
uint8_t TWI_EERead8(uint16_t adress, uint8_t *data)
{
	uint8_t status = 0;
	TWIStart();
	status = TWIReadStatus();
	if(status != 0x08)
     f56:	88 30       	cpi	r24, 0x08	; 8
     f58:	09 f0       	breq	.+2      	; 0xf5c <TWI_EERead8+0x1e>
     f5a:	5a c0       	rjmp	.+180    	; 0x1010 <TWI_EERead8+0xd2>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void TWIWrite(uint8_t data)
{
	TWDR = data;
     f5c:	80 ea       	ldi	r24, 0xA0	; 160
     f5e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = ((1<<TWINT) | (1<<TWEN));
     f62:	84 e8       	ldi	r24, 0x84	; 132
     f64:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
     f68:	80 91 bc 00 	lds	r24, 0x00BC
     f6c:	87 ff       	sbrs	r24, 7
     f6e:	fc cf       	rjmp	.-8      	; 0xf68 <TWI_EERead8+0x2a>
}

uint8_t TWIReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
     f70:	80 91 b9 00 	lds	r24, 0x00B9
     f74:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	TWIWrite(ID);
	status = TWIReadStatus();
	if(status != 0x18)
     f76:	88 31       	cpi	r24, 0x18	; 24
     f78:	09 f0       	breq	.+2      	; 0xf7c <TWI_EERead8+0x3e>
     f7a:	4a c0       	rjmp	.+148    	; 0x1010 <TWI_EERead8+0xd2>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void TWIWrite(uint8_t data)
{
	TWDR = data;
     f7c:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = ((1<<TWINT) | (1<<TWEN));
     f80:	84 e8       	ldi	r24, 0x84	; 132
     f82:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
     f86:	80 91 bc 00 	lds	r24, 0x00BC
     f8a:	87 ff       	sbrs	r24, 7
     f8c:	fc cf       	rjmp	.-8      	; 0xf86 <TWI_EERead8+0x48>
}

uint8_t TWIReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
     f8e:	80 91 b9 00 	lds	r24, 0x00B9
     f92:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	TWIWrite((uint8_t)(adress >> 8));
	status = TWIReadStatus();
	if(status != 0x28)
     f94:	88 32       	cpi	r24, 0x28	; 40
     f96:	e1 f5       	brne	.+120    	; 0x1010 <TWI_EERead8+0xd2>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void TWIWrite(uint8_t data)
{
	TWDR = data;
     f98:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = ((1<<TWINT) | (1<<TWEN));
     f9c:	84 e8       	ldi	r24, 0x84	; 132
     f9e:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
     fa2:	80 91 bc 00 	lds	r24, 0x00BC
     fa6:	87 ff       	sbrs	r24, 7
     fa8:	fc cf       	rjmp	.-8      	; 0xfa2 <TWI_EERead8+0x64>
}

uint8_t TWIReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
     faa:	80 91 b9 00 	lds	r24, 0x00B9
     fae:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	TWIWrite((uint8_t)(adress));
	status = TWIReadStatus();
	if(status != 0x28)
     fb0:	88 32       	cpi	r24, 0x28	; 40
     fb2:	71 f5       	brne	.+92     	; 0x1010 <TWI_EERead8+0xd2>
	TWCR = (1<<TWEN);
}

void TWIStart(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     fb4:	84 ea       	ldi	r24, 0xA4	; 164
     fb6:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
     fba:	80 91 bc 00 	lds	r24, 0x00BC
     fbe:	87 ff       	sbrs	r24, 7
     fc0:	fc cf       	rjmp	.-8      	; 0xfba <TWI_EERead8+0x7c>
}

uint8_t TWIReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
     fc2:	80 91 b9 00 	lds	r24, 0x00B9
     fc6:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	TWIStart();
	status = TWIReadStatus();
	if(status != 0x10)
     fc8:	80 31       	cpi	r24, 0x10	; 16
     fca:	11 f5       	brne	.+68     	; 0x1010 <TWI_EERead8+0xd2>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void TWIWrite(uint8_t data)
{
	TWDR = data;
     fcc:	81 ea       	ldi	r24, 0xA1	; 161
     fce:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = ((1<<TWINT) | (1<<TWEN));
     fd2:	84 e8       	ldi	r24, 0x84	; 132
     fd4:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
     fd8:	80 91 bc 00 	lds	r24, 0x00BC
     fdc:	87 ff       	sbrs	r24, 7
     fde:	fc cf       	rjmp	.-8      	; 0xfd8 <TWI_EERead8+0x9a>
}

uint8_t TWIReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
     fe0:	80 91 b9 00 	lds	r24, 0x00B9
     fe4:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	TWIWrite(ID|1);
	status = TWIReadStatus();
	if(status != 0x40)
     fe6:	80 34       	cpi	r24, 0x40	; 64
     fe8:	99 f4       	brne	.+38     	; 0x1010 <TWI_EERead8+0xd2>
	return TWDR;
}

uint8_t TWIReadNACK(void)
{
	TWCR = ((1<<TWINT) | (1<<TWEN));
     fea:	84 e8       	ldi	r24, 0x84	; 132
     fec:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
     ff0:	80 91 bc 00 	lds	r24, 0x00BC
     ff4:	87 ff       	sbrs	r24, 7
     ff6:	fc cf       	rjmp	.-8      	; 0xff0 <TWI_EERead8+0xb2>
	return TWDR;
     ff8:	80 91 bb 00 	lds	r24, 0x00BB
	status = TWIReadStatus();
	if(status != 0x40)
	{
		return status;
	}
	*data = TWIReadNACK();
     ffc:	80 83       	st	Z, r24
}

uint8_t TWIReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
     ffe:	80 91 b9 00 	lds	r24, 0x00B9
    1002:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	*data = TWIReadNACK();
	status = TWIReadStatus();
	if(status != 0x58)
    1004:	88 35       	cpi	r24, 0x58	; 88
    1006:	21 f4       	brne	.+8      	; 0x1010 <TWI_EERead8+0xd2>
	while((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
    1008:	84 e9       	ldi	r24, 0x94	; 148
    100a:	80 93 bc 00 	sts	0x00BC, r24
    100e:	80 e0       	ldi	r24, 0x00	; 0
	{
		return status;
	}
	TWIStop();
	return 0x00;
}
    1010:	08 95       	ret

00001012 <TWI_EEWrite16>:

uint8_t TWI_EEWrite16(uint16_t adress, uint16_t data)
{
    1012:	28 2f       	mov	r18, r24
	TWCR = (1<<TWEN);
}

void TWIStart(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1014:	84 ea       	ldi	r24, 0xA4	; 164
    1016:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    101a:	80 91 bc 00 	lds	r24, 0x00BC
    101e:	87 ff       	sbrs	r24, 7
    1020:	fc cf       	rjmp	.-8      	; 0x101a <TWI_EEWrite16+0x8>
}

uint8_t TWIReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    1022:	80 91 b9 00 	lds	r24, 0x00B9
    1026:	88 7f       	andi	r24, 0xF8	; 248
uint8_t TWI_EEWrite16(uint16_t adress, uint16_t data)
{
	uint8_t status = 0;
	TWIStart();
	status = TWIReadStatus();
	if(status != 0x08)
    1028:	88 30       	cpi	r24, 0x08	; 8
    102a:	09 f0       	breq	.+2      	; 0x102e <TWI_EEWrite16+0x1c>
    102c:	4b c0       	rjmp	.+150    	; 0x10c4 <TWI_EEWrite16+0xb2>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void TWIWrite(uint8_t data)
{
	TWDR = data;
    102e:	80 ea       	ldi	r24, 0xA0	; 160
    1030:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = ((1<<TWINT) | (1<<TWEN));
    1034:	84 e8       	ldi	r24, 0x84	; 132
    1036:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    103a:	80 91 bc 00 	lds	r24, 0x00BC
    103e:	87 ff       	sbrs	r24, 7
    1040:	fc cf       	rjmp	.-8      	; 0x103a <TWI_EEWrite16+0x28>
}

uint8_t TWIReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    1042:	80 91 b9 00 	lds	r24, 0x00B9
    1046:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	TWIWrite(ID);
	status = TWIReadStatus();
	if(status != 0x18)
    1048:	88 31       	cpi	r24, 0x18	; 24
    104a:	e1 f5       	brne	.+120    	; 0x10c4 <TWI_EEWrite16+0xb2>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void TWIWrite(uint8_t data)
{
	TWDR = data;
    104c:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = ((1<<TWINT) | (1<<TWEN));
    1050:	84 e8       	ldi	r24, 0x84	; 132
    1052:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    1056:	80 91 bc 00 	lds	r24, 0x00BC
    105a:	87 ff       	sbrs	r24, 7
    105c:	fc cf       	rjmp	.-8      	; 0x1056 <TWI_EEWrite16+0x44>
}

uint8_t TWIReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    105e:	80 91 b9 00 	lds	r24, 0x00B9
    1062:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	TWIWrite((uint8_t)(adress >> 8));
	status = TWIReadStatus();
	if(status != 0x28)
    1064:	88 32       	cpi	r24, 0x28	; 40
    1066:	71 f5       	brne	.+92     	; 0x10c4 <TWI_EEWrite16+0xb2>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void TWIWrite(uint8_t data)
{
	TWDR = data;
    1068:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = ((1<<TWINT) | (1<<TWEN));
    106c:	84 e8       	ldi	r24, 0x84	; 132
    106e:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    1072:	80 91 bc 00 	lds	r24, 0x00BC
    1076:	87 ff       	sbrs	r24, 7
    1078:	fc cf       	rjmp	.-8      	; 0x1072 <TWI_EEWrite16+0x60>
}

uint8_t TWIReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    107a:	80 91 b9 00 	lds	r24, 0x00B9
    107e:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	TWIWrite((uint8_t)(adress));
	status = TWIReadStatus();
	if(status != 0x28)
    1080:	88 32       	cpi	r24, 0x28	; 40
    1082:	01 f5       	brne	.+64     	; 0x10c4 <TWI_EEWrite16+0xb2>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void TWIWrite(uint8_t data)
{
	TWDR = data;
    1084:	70 93 bb 00 	sts	0x00BB, r23
	TWCR = ((1<<TWINT) | (1<<TWEN));
    1088:	84 e8       	ldi	r24, 0x84	; 132
    108a:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    108e:	80 91 bc 00 	lds	r24, 0x00BC
    1092:	87 ff       	sbrs	r24, 7
    1094:	fc cf       	rjmp	.-8      	; 0x108e <TWI_EEWrite16+0x7c>
}

uint8_t TWIReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    1096:	80 91 b9 00 	lds	r24, 0x00B9
    109a:	88 7f       	andi	r24, 0xF8	; 248
	}
	
	
	TWIWrite((uint8_t)(data >> 8));
	status = TWIReadStatus();
	if(status != 0x28)
    109c:	88 32       	cpi	r24, 0x28	; 40
    109e:	91 f4       	brne	.+36     	; 0x10c4 <TWI_EEWrite16+0xb2>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void TWIWrite(uint8_t data)
{
	TWDR = data;
    10a0:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = ((1<<TWINT) | (1<<TWEN));
    10a4:	84 e8       	ldi	r24, 0x84	; 132
    10a6:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    10aa:	80 91 bc 00 	lds	r24, 0x00BC
    10ae:	87 ff       	sbrs	r24, 7
    10b0:	fc cf       	rjmp	.-8      	; 0x10aa <TWI_EEWrite16+0x98>
}

uint8_t TWIReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    10b2:	80 91 b9 00 	lds	r24, 0x00B9
    10b6:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	TWIWrite((uint8_t)(data));
	status = TWIReadStatus();
	if(status != 0x28)
    10b8:	88 32       	cpi	r24, 0x28	; 40
    10ba:	21 f4       	brne	.+8      	; 0x10c4 <TWI_EEWrite16+0xb2>
	while((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
    10bc:	84 e9       	ldi	r24, 0x94	; 148
    10be:	80 93 bc 00 	sts	0x00BC, r24
    10c2:	80 e0       	ldi	r24, 0x00	; 0
		return status;
	}
	
	TWIStop();
	return 0x00;
}
    10c4:	08 95       	ret

000010c6 <TWI_EERead16>:

uint8_t TWI_EERead16(uint16_t adress, uint16_t *data)
{
    10c6:	28 2f       	mov	r18, r24
    10c8:	fb 01       	movw	r30, r22
	TWCR = (1<<TWEN);
}

void TWIStart(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    10ca:	84 ea       	ldi	r24, 0xA4	; 164
    10cc:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    10d0:	80 91 bc 00 	lds	r24, 0x00BC
    10d4:	87 ff       	sbrs	r24, 7
    10d6:	fc cf       	rjmp	.-8      	; 0x10d0 <TWI_EERead16+0xa>
}

uint8_t TWIReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    10d8:	80 91 b9 00 	lds	r24, 0x00B9
    10dc:	88 7f       	andi	r24, 0xF8	; 248
{
	uint8_t status = 0;
	uint16_t output = 0;
	TWIStart();
	status = TWIReadStatus();
	if(status != 0x08)
    10de:	88 30       	cpi	r24, 0x08	; 8
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <TWI_EERead16+0x1e>
    10e2:	70 c0       	rjmp	.+224    	; 0x11c4 <TWI_EERead16+0xfe>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void TWIWrite(uint8_t data)
{
	TWDR = data;
    10e4:	80 ea       	ldi	r24, 0xA0	; 160
    10e6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = ((1<<TWINT) | (1<<TWEN));
    10ea:	84 e8       	ldi	r24, 0x84	; 132
    10ec:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    10f0:	80 91 bc 00 	lds	r24, 0x00BC
    10f4:	87 ff       	sbrs	r24, 7
    10f6:	fc cf       	rjmp	.-8      	; 0x10f0 <TWI_EERead16+0x2a>
}

uint8_t TWIReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    10f8:	80 91 b9 00 	lds	r24, 0x00B9
    10fc:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	TWIWrite(ID);
	status = TWIReadStatus();
	if(status != 0x18)
    10fe:	88 31       	cpi	r24, 0x18	; 24
    1100:	09 f0       	breq	.+2      	; 0x1104 <TWI_EERead16+0x3e>
    1102:	60 c0       	rjmp	.+192    	; 0x11c4 <TWI_EERead16+0xfe>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void TWIWrite(uint8_t data)
{
	TWDR = data;
    1104:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = ((1<<TWINT) | (1<<TWEN));
    1108:	84 e8       	ldi	r24, 0x84	; 132
    110a:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    110e:	80 91 bc 00 	lds	r24, 0x00BC
    1112:	87 ff       	sbrs	r24, 7
    1114:	fc cf       	rjmp	.-8      	; 0x110e <TWI_EERead16+0x48>
}

uint8_t TWIReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    1116:	80 91 b9 00 	lds	r24, 0x00B9
    111a:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	TWIWrite((uint8_t)(adress >> 8));
	status = TWIReadStatus();
	if(status != 0x28)
    111c:	88 32       	cpi	r24, 0x28	; 40
    111e:	09 f0       	breq	.+2      	; 0x1122 <TWI_EERead16+0x5c>
    1120:	51 c0       	rjmp	.+162    	; 0x11c4 <TWI_EERead16+0xfe>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void TWIWrite(uint8_t data)
{
	TWDR = data;
    1122:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = ((1<<TWINT) | (1<<TWEN));
    1126:	84 e8       	ldi	r24, 0x84	; 132
    1128:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    112c:	80 91 bc 00 	lds	r24, 0x00BC
    1130:	87 ff       	sbrs	r24, 7
    1132:	fc cf       	rjmp	.-8      	; 0x112c <TWI_EERead16+0x66>
}

uint8_t TWIReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    1134:	80 91 b9 00 	lds	r24, 0x00B9
    1138:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	TWIWrite((uint8_t)(adress));
	status = TWIReadStatus();
	if(status != 0x28)
    113a:	88 32       	cpi	r24, 0x28	; 40
    113c:	09 f0       	breq	.+2      	; 0x1140 <TWI_EERead16+0x7a>
    113e:	42 c0       	rjmp	.+132    	; 0x11c4 <TWI_EERead16+0xfe>
	TWCR = (1<<TWEN);
}

void TWIStart(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1140:	84 ea       	ldi	r24, 0xA4	; 164
    1142:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    1146:	80 91 bc 00 	lds	r24, 0x00BC
    114a:	87 ff       	sbrs	r24, 7
    114c:	fc cf       	rjmp	.-8      	; 0x1146 <TWI_EERead16+0x80>
}

uint8_t TWIReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    114e:	80 91 b9 00 	lds	r24, 0x00B9
    1152:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	TWIStart();
	status = TWIReadStatus();
	if(status != 0x10)
    1154:	80 31       	cpi	r24, 0x10	; 16
    1156:	b1 f5       	brne	.+108    	; 0x11c4 <TWI_EERead16+0xfe>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void TWIWrite(uint8_t data)
{
	TWDR = data;
    1158:	81 ea       	ldi	r24, 0xA1	; 161
    115a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = ((1<<TWINT) | (1<<TWEN));
    115e:	84 e8       	ldi	r24, 0x84	; 132
    1160:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    1164:	80 91 bc 00 	lds	r24, 0x00BC
    1168:	87 ff       	sbrs	r24, 7
    116a:	fc cf       	rjmp	.-8      	; 0x1164 <TWI_EERead16+0x9e>
}

uint8_t TWIReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    116c:	80 91 b9 00 	lds	r24, 0x00B9
    1170:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	TWIWrite(ID|1);
	status = TWIReadStatus();
	if(status != 0x40)
    1172:	80 34       	cpi	r24, 0x40	; 64
    1174:	39 f5       	brne	.+78     	; 0x11c4 <TWI_EERead16+0xfe>
	while((TWCR & (1<<TWINT)) == 0);
}

uint8_t TWIReadACK(void)
{
	TWCR = ((1<<TWINT) | (1<<TWEN)| (1<<TWEA));
    1176:	84 ec       	ldi	r24, 0xC4	; 196
    1178:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    117c:	80 91 bc 00 	lds	r24, 0x00BC
    1180:	87 ff       	sbrs	r24, 7
    1182:	fc cf       	rjmp	.-8      	; 0x117c <TWI_EERead16+0xb6>
	return TWDR;
    1184:	30 91 bb 00 	lds	r19, 0x00BB
}

uint8_t TWIReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    1188:	80 91 b9 00 	lds	r24, 0x00B9
    118c:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	output |= (uint16_t)(TWIReadACK())<<8;
	status = TWIReadStatus();
	if(status != 0x50)
    118e:	80 35       	cpi	r24, 0x50	; 80
    1190:	c9 f4       	brne	.+50     	; 0x11c4 <TWI_EERead16+0xfe>
	return TWDR;
}

uint8_t TWIReadNACK(void)
{
	TWCR = ((1<<TWINT) | (1<<TWEN));
    1192:	84 e8       	ldi	r24, 0x84	; 132
    1194:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    1198:	80 91 bc 00 	lds	r24, 0x00BC
    119c:	87 ff       	sbrs	r24, 7
    119e:	fc cf       	rjmp	.-8      	; 0x1198 <TWI_EERead16+0xd2>
	return TWDR;
    11a0:	20 91 bb 00 	lds	r18, 0x00BB
}

uint8_t TWIReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    11a4:	80 91 b9 00 	lds	r24, 0x00B9
    11a8:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	output |= (0x0FF & TWIReadNACK());
	status = TWIReadStatus();
	if(status != 0x58)
    11aa:	88 35       	cpi	r24, 0x58	; 88
    11ac:	59 f4       	brne	.+22     	; 0x11c4 <TWI_EERead16+0xfe>
	{
		return status;
	}
	*data = output;
    11ae:	93 2f       	mov	r25, r19
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	82 2b       	or	r24, r18
    11b6:	93 2b       	or	r25, r19
    11b8:	91 83       	std	Z+1, r25	; 0x01
    11ba:	80 83       	st	Z, r24
	while((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
    11bc:	84 e9       	ldi	r24, 0x94	; 148
    11be:	80 93 bc 00 	sts	0x00BC, r24
    11c2:	80 e0       	ldi	r24, 0x00	; 0
		return status;
	}
	*data = output;
	TWIStop();
	return 0x00;
}
    11c4:	08 95       	ret

000011c6 <I2CInit>:
#include "I2C.h"

void I2CInit(void)
{
	TWSR = 0x00;
    11c6:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = 0x0C;
    11ca:	8c e0       	ldi	r24, 0x0C	; 12
    11cc:	80 93 b8 00 	sts	0x00B8, r24
	TWCR = (1<<TWEN);
    11d0:	84 e0       	ldi	r24, 0x04	; 4
    11d2:	80 93 bc 00 	sts	0x00BC, r24
}
    11d6:	08 95       	ret

000011d8 <I2CStart>:

void I2CStart(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    11d8:	84 ea       	ldi	r24, 0xA4	; 164
    11da:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    11de:	80 91 bc 00 	lds	r24, 0x00BC
    11e2:	87 ff       	sbrs	r24, 7
    11e4:	fc cf       	rjmp	.-8      	; 0x11de <I2CStart+0x6>
}
    11e6:	08 95       	ret

000011e8 <I2CStop>:

void I2CStop(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
    11e8:	84 e9       	ldi	r24, 0x94	; 148
    11ea:	80 93 bc 00 	sts	0x00BC, r24
}
    11ee:	08 95       	ret

000011f0 <I2CWrite>:

void I2CWrite(uint8_t data)
{
	TWDR = data;
    11f0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = ((1<<TWINT) | (1<<TWEN));
    11f4:	84 e8       	ldi	r24, 0x84	; 132
    11f6:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    11fa:	80 91 bc 00 	lds	r24, 0x00BC
    11fe:	87 ff       	sbrs	r24, 7
    1200:	fc cf       	rjmp	.-8      	; 0x11fa <I2CWrite+0xa>
}
    1202:	08 95       	ret

00001204 <I2CReadACK>:

uint8_t I2CReadACK(void)
{
	TWCR = ((1<<TWINT) | (1<<TWEN)| (1<<TWEA));
    1204:	84 ec       	ldi	r24, 0xC4	; 196
    1206:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    120a:	80 91 bc 00 	lds	r24, 0x00BC
    120e:	87 ff       	sbrs	r24, 7
    1210:	fc cf       	rjmp	.-8      	; 0x120a <I2CReadACK+0x6>
	return TWDR;
    1212:	80 91 bb 00 	lds	r24, 0x00BB
}
    1216:	08 95       	ret

00001218 <I2CReadNACK>:

uint8_t I2CReadNACK(void)
{
	TWCR = ((1<<TWINT) | (1<<TWEN));
    1218:	84 e8       	ldi	r24, 0x84	; 132
    121a:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    121e:	80 91 bc 00 	lds	r24, 0x00BC
    1222:	87 ff       	sbrs	r24, 7
    1224:	fc cf       	rjmp	.-8      	; 0x121e <I2CReadNACK+0x6>
	return TWDR;
    1226:	80 91 bb 00 	lds	r24, 0x00BB
}
    122a:	08 95       	ret

0000122c <I2CReadStatus>:

uint8_t I2CReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    122c:	80 91 b9 00 	lds	r24, 0x00B9
	return status;
}
    1230:	88 7f       	andi	r24, 0xF8	; 248
    1232:	08 95       	ret

00001234 <I2C_Write8>:

uint8_t I2C_Write8(uint8_t ID, uint8_t adress, uint8_t data)
{
    1234:	98 2f       	mov	r25, r24
	TWCR = (1<<TWEN);
}

void I2CStart(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1236:	84 ea       	ldi	r24, 0xA4	; 164
    1238:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    123c:	80 91 bc 00 	lds	r24, 0x00BC
    1240:	87 ff       	sbrs	r24, 7
    1242:	fc cf       	rjmp	.-8      	; 0x123c <I2C_Write8+0x8>
}

uint8_t I2CReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    1244:	80 91 b9 00 	lds	r24, 0x00B9
    1248:	88 7f       	andi	r24, 0xF8	; 248
uint8_t I2C_Write8(uint8_t ID, uint8_t adress, uint8_t data)
{
	uint8_t status = 0;
	I2CStart();
	status = I2CReadStatus();
	if(status != 0x08)
    124a:	88 30       	cpi	r24, 0x08	; 8
    124c:	71 f5       	brne	.+92     	; 0x12aa <I2C_Write8+0x76>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void I2CWrite(uint8_t data)
{
	TWDR = data;
    124e:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = ((1<<TWINT) | (1<<TWEN));
    1252:	84 e8       	ldi	r24, 0x84	; 132
    1254:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    1258:	80 91 bc 00 	lds	r24, 0x00BC
    125c:	87 ff       	sbrs	r24, 7
    125e:	fc cf       	rjmp	.-8      	; 0x1258 <I2C_Write8+0x24>
}

uint8_t I2CReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    1260:	80 91 b9 00 	lds	r24, 0x00B9
    1264:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	I2CWrite(ID);
	status = I2CReadStatus();
	if(status != 0x18)
    1266:	88 31       	cpi	r24, 0x18	; 24
    1268:	01 f5       	brne	.+64     	; 0x12aa <I2C_Write8+0x76>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void I2CWrite(uint8_t data)
{
	TWDR = data;
    126a:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = ((1<<TWINT) | (1<<TWEN));
    126e:	84 e8       	ldi	r24, 0x84	; 132
    1270:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    1274:	80 91 bc 00 	lds	r24, 0x00BC
    1278:	87 ff       	sbrs	r24, 7
    127a:	fc cf       	rjmp	.-8      	; 0x1274 <I2C_Write8+0x40>
}

uint8_t I2CReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    127c:	80 91 b9 00 	lds	r24, 0x00B9
    1280:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	I2CWrite(adress);
	status = I2CReadStatus();
	if(status != 0x28)
    1282:	88 32       	cpi	r24, 0x28	; 40
    1284:	91 f4       	brne	.+36     	; 0x12aa <I2C_Write8+0x76>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void I2CWrite(uint8_t data)
{
	TWDR = data;
    1286:	40 93 bb 00 	sts	0x00BB, r20
	TWCR = ((1<<TWINT) | (1<<TWEN));
    128a:	84 e8       	ldi	r24, 0x84	; 132
    128c:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    1290:	80 91 bc 00 	lds	r24, 0x00BC
    1294:	87 ff       	sbrs	r24, 7
    1296:	fc cf       	rjmp	.-8      	; 0x1290 <I2C_Write8+0x5c>
}

uint8_t I2CReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    1298:	80 91 b9 00 	lds	r24, 0x00B9
    129c:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	I2CWrite(data);
	status = I2CReadStatus();
	if(status != 0x28)
    129e:	88 32       	cpi	r24, 0x28	; 40
    12a0:	21 f4       	brne	.+8      	; 0x12aa <I2C_Write8+0x76>
	while((TWCR & (1<<TWINT)) == 0);
}

void I2CStop(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
    12a2:	84 e9       	ldi	r24, 0x94	; 148
    12a4:	80 93 bc 00 	sts	0x00BC, r24
    12a8:	80 e0       	ldi	r24, 0x00	; 0
		return status;
	}
	
	I2CStop();
	return 0x00;
}
    12aa:	08 95       	ret

000012ac <I2C_Read8>:

uint8_t I2C_Read8(uint8_t ID, uint8_t adress, uint8_t *data)
{
    12ac:	98 2f       	mov	r25, r24
    12ae:	fa 01       	movw	r30, r20
	TWCR = (1<<TWEN);
}

void I2CStart(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    12b0:	84 ea       	ldi	r24, 0xA4	; 164
    12b2:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    12b6:	80 91 bc 00 	lds	r24, 0x00BC
    12ba:	87 ff       	sbrs	r24, 7
    12bc:	fc cf       	rjmp	.-8      	; 0x12b6 <I2C_Read8+0xa>
}

uint8_t I2CReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    12be:	80 91 b9 00 	lds	r24, 0x00B9
    12c2:	88 7f       	andi	r24, 0xF8	; 248
uint8_t I2C_Read8(uint8_t ID, uint8_t adress, uint8_t *data)
{
	uint8_t status = 0;
	I2CStart();
	status = I2CReadStatus();
	if(status != 0x08)
    12c4:	88 30       	cpi	r24, 0x08	; 8
    12c6:	09 f0       	breq	.+2      	; 0x12ca <I2C_Read8+0x1e>
    12c8:	4a c0       	rjmp	.+148    	; 0x135e <I2C_Read8+0xb2>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void I2CWrite(uint8_t data)
{
	TWDR = data;
    12ca:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = ((1<<TWINT) | (1<<TWEN));
    12ce:	84 e8       	ldi	r24, 0x84	; 132
    12d0:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    12d4:	80 91 bc 00 	lds	r24, 0x00BC
    12d8:	87 ff       	sbrs	r24, 7
    12da:	fc cf       	rjmp	.-8      	; 0x12d4 <I2C_Read8+0x28>
}

uint8_t I2CReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    12dc:	80 91 b9 00 	lds	r24, 0x00B9
    12e0:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	I2CWrite(ID);
	status = I2CReadStatus();
	if(status != 0x18)
    12e2:	88 31       	cpi	r24, 0x18	; 24
    12e4:	e1 f5       	brne	.+120    	; 0x135e <I2C_Read8+0xb2>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void I2CWrite(uint8_t data)
{
	TWDR = data;
    12e6:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = ((1<<TWINT) | (1<<TWEN));
    12ea:	84 e8       	ldi	r24, 0x84	; 132
    12ec:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    12f0:	80 91 bc 00 	lds	r24, 0x00BC
    12f4:	87 ff       	sbrs	r24, 7
    12f6:	fc cf       	rjmp	.-8      	; 0x12f0 <I2C_Read8+0x44>
}

uint8_t I2CReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    12f8:	80 91 b9 00 	lds	r24, 0x00B9
    12fc:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	I2CWrite(adress);
	status = I2CReadStatus();
	if(status != 0x28)
    12fe:	88 32       	cpi	r24, 0x28	; 40
    1300:	71 f5       	brne	.+92     	; 0x135e <I2C_Read8+0xb2>
	TWCR = (1<<TWEN);
}

void I2CStart(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1302:	84 ea       	ldi	r24, 0xA4	; 164
    1304:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    1308:	80 91 bc 00 	lds	r24, 0x00BC
    130c:	87 ff       	sbrs	r24, 7
    130e:	fc cf       	rjmp	.-8      	; 0x1308 <I2C_Read8+0x5c>
}

uint8_t I2CReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    1310:	80 91 b9 00 	lds	r24, 0x00B9
    1314:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	I2CStart();
	status = I2CReadStatus();
	if(status != 0x10)
    1316:	80 31       	cpi	r24, 0x10	; 16
    1318:	11 f5       	brne	.+68     	; 0x135e <I2C_Read8+0xb2>
	{
		return status;
	}
	I2CWrite(ID|1);
    131a:	91 60       	ori	r25, 0x01	; 1
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void I2CWrite(uint8_t data)
{
	TWDR = data;
    131c:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = ((1<<TWINT) | (1<<TWEN));
    1320:	84 e8       	ldi	r24, 0x84	; 132
    1322:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    1326:	80 91 bc 00 	lds	r24, 0x00BC
    132a:	87 ff       	sbrs	r24, 7
    132c:	fc cf       	rjmp	.-8      	; 0x1326 <I2C_Read8+0x7a>
}

uint8_t I2CReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    132e:	80 91 b9 00 	lds	r24, 0x00B9
    1332:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	I2CWrite(ID|1);
	status = I2CReadStatus();
	if(status != 0x40)
    1334:	80 34       	cpi	r24, 0x40	; 64
    1336:	99 f4       	brne	.+38     	; 0x135e <I2C_Read8+0xb2>
	return TWDR;
}

uint8_t I2CReadNACK(void)
{
	TWCR = ((1<<TWINT) | (1<<TWEN));
    1338:	84 e8       	ldi	r24, 0x84	; 132
    133a:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    133e:	80 91 bc 00 	lds	r24, 0x00BC
    1342:	87 ff       	sbrs	r24, 7
    1344:	fc cf       	rjmp	.-8      	; 0x133e <I2C_Read8+0x92>
	return TWDR;
    1346:	80 91 bb 00 	lds	r24, 0x00BB
	status = I2CReadStatus();
	if(status != 0x40)
	{
		return status;
	}
	*data = I2CReadNACK();
    134a:	80 83       	st	Z, r24
}

uint8_t I2CReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    134c:	80 91 b9 00 	lds	r24, 0x00B9
    1350:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	*data = I2CReadNACK();
	status = I2CReadStatus();
	if(status != 0x58)
    1352:	88 35       	cpi	r24, 0x58	; 88
    1354:	21 f4       	brne	.+8      	; 0x135e <I2C_Read8+0xb2>
	while((TWCR & (1<<TWINT)) == 0);
}

void I2CStop(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
    1356:	84 e9       	ldi	r24, 0x94	; 148
    1358:	80 93 bc 00 	sts	0x00BC, r24
    135c:	80 e0       	ldi	r24, 0x00	; 0
	{
		return status;
	}
	I2CStop();
	return 0x00;
}
    135e:	08 95       	ret

00001360 <I2C_Write16>:

uint8_t I2C_Write16(uint8_t ID, uint16_t adress, uint16_t data)
{
    1360:	98 2f       	mov	r25, r24
	TWCR = (1<<TWEN);
}

void I2CStart(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1362:	84 ea       	ldi	r24, 0xA4	; 164
    1364:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    1368:	80 91 bc 00 	lds	r24, 0x00BC
    136c:	87 ff       	sbrs	r24, 7
    136e:	fc cf       	rjmp	.-8      	; 0x1368 <I2C_Write16+0x8>
}

uint8_t I2CReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    1370:	80 91 b9 00 	lds	r24, 0x00B9
    1374:	88 7f       	andi	r24, 0xF8	; 248
uint8_t I2C_Write16(uint8_t ID, uint16_t adress, uint16_t data)
{
	uint8_t status = 0;
	I2CStart();
	status = I2CReadStatus();
	if(status != 0x08)
    1376:	88 30       	cpi	r24, 0x08	; 8
    1378:	09 f0       	breq	.+2      	; 0x137c <I2C_Write16+0x1c>
    137a:	4a c0       	rjmp	.+148    	; 0x1410 <I2C_Write16+0xb0>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void I2CWrite(uint8_t data)
{
	TWDR = data;
    137c:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = ((1<<TWINT) | (1<<TWEN));
    1380:	84 e8       	ldi	r24, 0x84	; 132
    1382:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    1386:	80 91 bc 00 	lds	r24, 0x00BC
    138a:	87 ff       	sbrs	r24, 7
    138c:	fc cf       	rjmp	.-8      	; 0x1386 <I2C_Write16+0x26>
}

uint8_t I2CReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    138e:	80 91 b9 00 	lds	r24, 0x00B9
    1392:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	I2CWrite(ID);
	status = I2CReadStatus();
	if(status != 0x18)
    1394:	88 31       	cpi	r24, 0x18	; 24
    1396:	e1 f5       	brne	.+120    	; 0x1410 <I2C_Write16+0xb0>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void I2CWrite(uint8_t data)
{
	TWDR = data;
    1398:	70 93 bb 00 	sts	0x00BB, r23
	TWCR = ((1<<TWINT) | (1<<TWEN));
    139c:	84 e8       	ldi	r24, 0x84	; 132
    139e:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    13a2:	80 91 bc 00 	lds	r24, 0x00BC
    13a6:	87 ff       	sbrs	r24, 7
    13a8:	fc cf       	rjmp	.-8      	; 0x13a2 <I2C_Write16+0x42>
}

uint8_t I2CReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    13aa:	80 91 b9 00 	lds	r24, 0x00B9
    13ae:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	I2CWrite((uint8_t)(adress >> 8));
	status = I2CReadStatus();
	if(status != 0x28)
    13b0:	88 32       	cpi	r24, 0x28	; 40
    13b2:	71 f5       	brne	.+92     	; 0x1410 <I2C_Write16+0xb0>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void I2CWrite(uint8_t data)
{
	TWDR = data;
    13b4:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = ((1<<TWINT) | (1<<TWEN));
    13b8:	84 e8       	ldi	r24, 0x84	; 132
    13ba:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    13be:	80 91 bc 00 	lds	r24, 0x00BC
    13c2:	87 ff       	sbrs	r24, 7
    13c4:	fc cf       	rjmp	.-8      	; 0x13be <I2C_Write16+0x5e>
}

uint8_t I2CReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    13c6:	80 91 b9 00 	lds	r24, 0x00B9
    13ca:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	I2CWrite((uint8_t)(adress));
	status = I2CReadStatus();
	if(status != 0x28)
    13cc:	88 32       	cpi	r24, 0x28	; 40
    13ce:	01 f5       	brne	.+64     	; 0x1410 <I2C_Write16+0xb0>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void I2CWrite(uint8_t data)
{
	TWDR = data;
    13d0:	50 93 bb 00 	sts	0x00BB, r21
	TWCR = ((1<<TWINT) | (1<<TWEN));
    13d4:	84 e8       	ldi	r24, 0x84	; 132
    13d6:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    13da:	80 91 bc 00 	lds	r24, 0x00BC
    13de:	87 ff       	sbrs	r24, 7
    13e0:	fc cf       	rjmp	.-8      	; 0x13da <I2C_Write16+0x7a>
}

uint8_t I2CReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    13e2:	80 91 b9 00 	lds	r24, 0x00B9
    13e6:	88 7f       	andi	r24, 0xF8	; 248
	}
	
	
	I2CWrite((uint8_t)(data >> 8));
	status = I2CReadStatus();
	if(status != 0x28)
    13e8:	88 32       	cpi	r24, 0x28	; 40
    13ea:	91 f4       	brne	.+36     	; 0x1410 <I2C_Write16+0xb0>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void I2CWrite(uint8_t data)
{
	TWDR = data;
    13ec:	40 93 bb 00 	sts	0x00BB, r20
	TWCR = ((1<<TWINT) | (1<<TWEN));
    13f0:	84 e8       	ldi	r24, 0x84	; 132
    13f2:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    13f6:	80 91 bc 00 	lds	r24, 0x00BC
    13fa:	87 ff       	sbrs	r24, 7
    13fc:	fc cf       	rjmp	.-8      	; 0x13f6 <I2C_Write16+0x96>
}

uint8_t I2CReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    13fe:	80 91 b9 00 	lds	r24, 0x00B9
    1402:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	I2CWrite((uint8_t)(data));
	status = I2CReadStatus();
	if(status != 0x28)
    1404:	88 32       	cpi	r24, 0x28	; 40
    1406:	21 f4       	brne	.+8      	; 0x1410 <I2C_Write16+0xb0>
	while((TWCR & (1<<TWINT)) == 0);
}

void I2CStop(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
    1408:	84 e9       	ldi	r24, 0x94	; 148
    140a:	80 93 bc 00 	sts	0x00BC, r24
    140e:	80 e0       	ldi	r24, 0x00	; 0
		return status;
	}
	
	I2CStop();
	return 0x00;
}
    1410:	08 95       	ret

00001412 <I2C_Read16>:

uint8_t I2C_Read16(uint8_t ID, uint16_t adress, uint16_t *data)
{
    1412:	98 2f       	mov	r25, r24
    1414:	fa 01       	movw	r30, r20
	TWCR = (1<<TWEN);
}

void I2CStart(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1416:	84 ea       	ldi	r24, 0xA4	; 164
    1418:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    141c:	80 91 bc 00 	lds	r24, 0x00BC
    1420:	87 ff       	sbrs	r24, 7
    1422:	fc cf       	rjmp	.-8      	; 0x141c <I2C_Read16+0xa>
}

uint8_t I2CReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    1424:	80 91 b9 00 	lds	r24, 0x00B9
    1428:	88 7f       	andi	r24, 0xF8	; 248
{
	uint8_t status = 0;
	uint16_t output = 0;
	I2CStart();
	status = I2CReadStatus();
	if(status != 0x08)
    142a:	88 30       	cpi	r24, 0x08	; 8
    142c:	09 f0       	breq	.+2      	; 0x1430 <I2C_Read16+0x1e>
    142e:	6f c0       	rjmp	.+222    	; 0x150e <I2C_Read16+0xfc>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void I2CWrite(uint8_t data)
{
	TWDR = data;
    1430:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = ((1<<TWINT) | (1<<TWEN));
    1434:	84 e8       	ldi	r24, 0x84	; 132
    1436:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    143a:	80 91 bc 00 	lds	r24, 0x00BC
    143e:	87 ff       	sbrs	r24, 7
    1440:	fc cf       	rjmp	.-8      	; 0x143a <I2C_Read16+0x28>
}

uint8_t I2CReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    1442:	80 91 b9 00 	lds	r24, 0x00B9
    1446:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	I2CWrite(ID);
	status = I2CReadStatus();
	if(status != 0x18)
    1448:	88 31       	cpi	r24, 0x18	; 24
    144a:	09 f0       	breq	.+2      	; 0x144e <I2C_Read16+0x3c>
    144c:	60 c0       	rjmp	.+192    	; 0x150e <I2C_Read16+0xfc>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void I2CWrite(uint8_t data)
{
	TWDR = data;
    144e:	70 93 bb 00 	sts	0x00BB, r23
	TWCR = ((1<<TWINT) | (1<<TWEN));
    1452:	84 e8       	ldi	r24, 0x84	; 132
    1454:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    1458:	80 91 bc 00 	lds	r24, 0x00BC
    145c:	87 ff       	sbrs	r24, 7
    145e:	fc cf       	rjmp	.-8      	; 0x1458 <I2C_Read16+0x46>
}

uint8_t I2CReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    1460:	80 91 b9 00 	lds	r24, 0x00B9
    1464:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	I2CWrite((uint8_t)(adress >> 8));
	status = I2CReadStatus();
	if(status != 0x28)
    1466:	88 32       	cpi	r24, 0x28	; 40
    1468:	09 f0       	breq	.+2      	; 0x146c <I2C_Read16+0x5a>
    146a:	51 c0       	rjmp	.+162    	; 0x150e <I2C_Read16+0xfc>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void I2CWrite(uint8_t data)
{
	TWDR = data;
    146c:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = ((1<<TWINT) | (1<<TWEN));
    1470:	84 e8       	ldi	r24, 0x84	; 132
    1472:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    1476:	80 91 bc 00 	lds	r24, 0x00BC
    147a:	87 ff       	sbrs	r24, 7
    147c:	fc cf       	rjmp	.-8      	; 0x1476 <I2C_Read16+0x64>
}

uint8_t I2CReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    147e:	80 91 b9 00 	lds	r24, 0x00B9
    1482:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	I2CWrite((uint8_t)(adress));
	status = I2CReadStatus();
	if(status != 0x28)
    1484:	88 32       	cpi	r24, 0x28	; 40
    1486:	09 f0       	breq	.+2      	; 0x148a <I2C_Read16+0x78>
    1488:	42 c0       	rjmp	.+132    	; 0x150e <I2C_Read16+0xfc>
	TWCR = (1<<TWEN);
}

void I2CStart(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    148a:	84 ea       	ldi	r24, 0xA4	; 164
    148c:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    1490:	80 91 bc 00 	lds	r24, 0x00BC
    1494:	87 ff       	sbrs	r24, 7
    1496:	fc cf       	rjmp	.-8      	; 0x1490 <I2C_Read16+0x7e>
}

uint8_t I2CReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    1498:	80 91 b9 00 	lds	r24, 0x00B9
    149c:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	I2CStart();
	status = I2CReadStatus();
	if(status != 0x10)
    149e:	80 31       	cpi	r24, 0x10	; 16
    14a0:	b1 f5       	brne	.+108    	; 0x150e <I2C_Read16+0xfc>
	{
		return status;
	}
	I2CWrite(ID|1);
    14a2:	91 60       	ori	r25, 0x01	; 1
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
}

void I2CWrite(uint8_t data)
{
	TWDR = data;
    14a4:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = ((1<<TWINT) | (1<<TWEN));
    14a8:	84 e8       	ldi	r24, 0x84	; 132
    14aa:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    14ae:	80 91 bc 00 	lds	r24, 0x00BC
    14b2:	87 ff       	sbrs	r24, 7
    14b4:	fc cf       	rjmp	.-8      	; 0x14ae <I2C_Read16+0x9c>
}

uint8_t I2CReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    14b6:	80 91 b9 00 	lds	r24, 0x00B9
    14ba:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	I2CWrite(ID|1);
	status = I2CReadStatus();
	if(status != 0x40)
    14bc:	80 34       	cpi	r24, 0x40	; 64
    14be:	39 f5       	brne	.+78     	; 0x150e <I2C_Read16+0xfc>
	while((TWCR & (1<<TWINT)) == 0);
}

uint8_t I2CReadACK(void)
{
	TWCR = ((1<<TWINT) | (1<<TWEN)| (1<<TWEA));
    14c0:	84 ec       	ldi	r24, 0xC4	; 196
    14c2:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    14c6:	80 91 bc 00 	lds	r24, 0x00BC
    14ca:	87 ff       	sbrs	r24, 7
    14cc:	fc cf       	rjmp	.-8      	; 0x14c6 <I2C_Read16+0xb4>
	return TWDR;
    14ce:	30 91 bb 00 	lds	r19, 0x00BB
}

uint8_t I2CReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    14d2:	80 91 b9 00 	lds	r24, 0x00B9
    14d6:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	output |= (uint16_t)(I2CReadACK())<<8;
	status = I2CReadStatus();
	if(status != 0x50)
    14d8:	80 35       	cpi	r24, 0x50	; 80
    14da:	c9 f4       	brne	.+50     	; 0x150e <I2C_Read16+0xfc>
	return TWDR;
}

uint8_t I2CReadNACK(void)
{
	TWCR = ((1<<TWINT) | (1<<TWEN));
    14dc:	84 e8       	ldi	r24, 0x84	; 132
    14de:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & (1<<TWINT)) == 0);
    14e2:	80 91 bc 00 	lds	r24, 0x00BC
    14e6:	87 ff       	sbrs	r24, 7
    14e8:	fc cf       	rjmp	.-8      	; 0x14e2 <I2C_Read16+0xd0>
	return TWDR;
    14ea:	20 91 bb 00 	lds	r18, 0x00BB
}

uint8_t I2CReadStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
    14ee:	80 91 b9 00 	lds	r24, 0x00B9
    14f2:	88 7f       	andi	r24, 0xF8	; 248
	{
		return status;
	}
	output |= (0x0FF & I2CReadNACK());
	status = I2CReadStatus();
	if(status != 0x58)
    14f4:	88 35       	cpi	r24, 0x58	; 88
    14f6:	59 f4       	brne	.+22     	; 0x150e <I2C_Read16+0xfc>
	{
		return status;
	}
	*data = output;
    14f8:	93 2f       	mov	r25, r19
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	82 2b       	or	r24, r18
    1500:	93 2b       	or	r25, r19
    1502:	91 83       	std	Z+1, r25	; 0x01
    1504:	80 83       	st	Z, r24
	while((TWCR & (1<<TWINT)) == 0);
}

void I2CStop(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
    1506:	84 e9       	ldi	r24, 0x94	; 148
    1508:	80 93 bc 00 	sts	0x00BC, r24
    150c:	80 e0       	ldi	r24, 0x00	; 0
		return status;
	}
	*data = output;
	I2CStop();
	return 0x00;
}
    150e:	08 95       	ret

00001510 <__mulsi3>:
    1510:	62 9f       	mul	r22, r18
    1512:	d0 01       	movw	r26, r0
    1514:	73 9f       	mul	r23, r19
    1516:	f0 01       	movw	r30, r0
    1518:	82 9f       	mul	r24, r18
    151a:	e0 0d       	add	r30, r0
    151c:	f1 1d       	adc	r31, r1
    151e:	64 9f       	mul	r22, r20
    1520:	e0 0d       	add	r30, r0
    1522:	f1 1d       	adc	r31, r1
    1524:	92 9f       	mul	r25, r18
    1526:	f0 0d       	add	r31, r0
    1528:	83 9f       	mul	r24, r19
    152a:	f0 0d       	add	r31, r0
    152c:	74 9f       	mul	r23, r20
    152e:	f0 0d       	add	r31, r0
    1530:	65 9f       	mul	r22, r21
    1532:	f0 0d       	add	r31, r0
    1534:	99 27       	eor	r25, r25
    1536:	72 9f       	mul	r23, r18
    1538:	b0 0d       	add	r27, r0
    153a:	e1 1d       	adc	r30, r1
    153c:	f9 1f       	adc	r31, r25
    153e:	63 9f       	mul	r22, r19
    1540:	b0 0d       	add	r27, r0
    1542:	e1 1d       	adc	r30, r1
    1544:	f9 1f       	adc	r31, r25
    1546:	bd 01       	movw	r22, r26
    1548:	cf 01       	movw	r24, r30
    154a:	11 24       	eor	r1, r1
    154c:	08 95       	ret

0000154e <sprintf>:
    154e:	ae e0       	ldi	r26, 0x0E	; 14
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	ed ea       	ldi	r30, 0xAD	; 173
    1554:	fa e0       	ldi	r31, 0x0A	; 10
    1556:	0c 94 56 0d 	jmp	0x1aac	; 0x1aac <__prologue_saves__+0x1c>
    155a:	0d 89       	ldd	r16, Y+21	; 0x15
    155c:	1e 89       	ldd	r17, Y+22	; 0x16
    155e:	86 e0       	ldi	r24, 0x06	; 6
    1560:	8c 83       	std	Y+4, r24	; 0x04
    1562:	1a 83       	std	Y+2, r17	; 0x02
    1564:	09 83       	std	Y+1, r16	; 0x01
    1566:	8f ef       	ldi	r24, 0xFF	; 255
    1568:	9f e7       	ldi	r25, 0x7F	; 127
    156a:	9e 83       	std	Y+6, r25	; 0x06
    156c:	8d 83       	std	Y+5, r24	; 0x05
    156e:	9e 01       	movw	r18, r28
    1570:	27 5e       	subi	r18, 0xE7	; 231
    1572:	3f 4f       	sbci	r19, 0xFF	; 255
    1574:	ce 01       	movw	r24, r28
    1576:	01 96       	adiw	r24, 0x01	; 1
    1578:	6f 89       	ldd	r22, Y+23	; 0x17
    157a:	78 8d       	ldd	r23, Y+24	; 0x18
    157c:	a9 01       	movw	r20, r18
    157e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <vfprintf>
    1582:	2f 81       	ldd	r18, Y+7	; 0x07
    1584:	38 85       	ldd	r19, Y+8	; 0x08
    1586:	02 0f       	add	r16, r18
    1588:	13 1f       	adc	r17, r19
    158a:	f8 01       	movw	r30, r16
    158c:	10 82       	st	Z, r1
    158e:	2e 96       	adiw	r28, 0x0e	; 14
    1590:	e4 e0       	ldi	r30, 0x04	; 4
    1592:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__epilogue_restores__+0x1c>

00001596 <vfprintf>:
    1596:	ab e0       	ldi	r26, 0x0B	; 11
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e1 ed       	ldi	r30, 0xD1	; 209
    159c:	fa e0       	ldi	r31, 0x0A	; 10
    159e:	0c 94 48 0d 	jmp	0x1a90	; 0x1a90 <__prologue_saves__>
    15a2:	3c 01       	movw	r6, r24
    15a4:	2b 01       	movw	r4, r22
    15a6:	5a 01       	movw	r10, r20
    15a8:	fc 01       	movw	r30, r24
    15aa:	17 82       	std	Z+7, r1	; 0x07
    15ac:	16 82       	std	Z+6, r1	; 0x06
    15ae:	83 81       	ldd	r24, Z+3	; 0x03
    15b0:	81 fd       	sbrc	r24, 1
    15b2:	03 c0       	rjmp	.+6      	; 0x15ba <vfprintf+0x24>
    15b4:	6f ef       	ldi	r22, 0xFF	; 255
    15b6:	7f ef       	ldi	r23, 0xFF	; 255
    15b8:	c6 c1       	rjmp	.+908    	; 0x1946 <vfprintf+0x3b0>
    15ba:	9a e0       	ldi	r25, 0x0A	; 10
    15bc:	89 2e       	mov	r8, r25
    15be:	1e 01       	movw	r2, r28
    15c0:	08 94       	sec
    15c2:	21 1c       	adc	r2, r1
    15c4:	31 1c       	adc	r3, r1
    15c6:	f3 01       	movw	r30, r6
    15c8:	23 81       	ldd	r18, Z+3	; 0x03
    15ca:	f2 01       	movw	r30, r4
    15cc:	23 fd       	sbrc	r18, 3
    15ce:	85 91       	lpm	r24, Z+
    15d0:	23 ff       	sbrs	r18, 3
    15d2:	81 91       	ld	r24, Z+
    15d4:	2f 01       	movw	r4, r30
    15d6:	88 23       	and	r24, r24
    15d8:	09 f4       	brne	.+2      	; 0x15dc <vfprintf+0x46>
    15da:	b2 c1       	rjmp	.+868    	; 0x1940 <vfprintf+0x3aa>
    15dc:	85 32       	cpi	r24, 0x25	; 37
    15de:	39 f4       	brne	.+14     	; 0x15ee <vfprintf+0x58>
    15e0:	23 fd       	sbrc	r18, 3
    15e2:	85 91       	lpm	r24, Z+
    15e4:	23 ff       	sbrs	r18, 3
    15e6:	81 91       	ld	r24, Z+
    15e8:	2f 01       	movw	r4, r30
    15ea:	85 32       	cpi	r24, 0x25	; 37
    15ec:	29 f4       	brne	.+10     	; 0x15f8 <vfprintf+0x62>
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	b3 01       	movw	r22, r6
    15f2:	0e 94 be 0c 	call	0x197c	; 0x197c <fputc>
    15f6:	e7 cf       	rjmp	.-50     	; 0x15c6 <vfprintf+0x30>
    15f8:	98 2f       	mov	r25, r24
    15fa:	ff 24       	eor	r15, r15
    15fc:	ee 24       	eor	r14, r14
    15fe:	99 24       	eor	r9, r9
    1600:	ff e1       	ldi	r31, 0x1F	; 31
    1602:	ff 15       	cp	r31, r15
    1604:	d0 f0       	brcs	.+52     	; 0x163a <vfprintf+0xa4>
    1606:	9b 32       	cpi	r25, 0x2B	; 43
    1608:	69 f0       	breq	.+26     	; 0x1624 <vfprintf+0x8e>
    160a:	9c 32       	cpi	r25, 0x2C	; 44
    160c:	28 f4       	brcc	.+10     	; 0x1618 <vfprintf+0x82>
    160e:	90 32       	cpi	r25, 0x20	; 32
    1610:	59 f0       	breq	.+22     	; 0x1628 <vfprintf+0x92>
    1612:	93 32       	cpi	r25, 0x23	; 35
    1614:	91 f4       	brne	.+36     	; 0x163a <vfprintf+0xa4>
    1616:	0e c0       	rjmp	.+28     	; 0x1634 <vfprintf+0x9e>
    1618:	9d 32       	cpi	r25, 0x2D	; 45
    161a:	49 f0       	breq	.+18     	; 0x162e <vfprintf+0x98>
    161c:	90 33       	cpi	r25, 0x30	; 48
    161e:	69 f4       	brne	.+26     	; 0x163a <vfprintf+0xa4>
    1620:	41 e0       	ldi	r20, 0x01	; 1
    1622:	24 c0       	rjmp	.+72     	; 0x166c <vfprintf+0xd6>
    1624:	52 e0       	ldi	r21, 0x02	; 2
    1626:	f5 2a       	or	r15, r21
    1628:	84 e0       	ldi	r24, 0x04	; 4
    162a:	f8 2a       	or	r15, r24
    162c:	28 c0       	rjmp	.+80     	; 0x167e <vfprintf+0xe8>
    162e:	98 e0       	ldi	r25, 0x08	; 8
    1630:	f9 2a       	or	r15, r25
    1632:	25 c0       	rjmp	.+74     	; 0x167e <vfprintf+0xe8>
    1634:	e0 e1       	ldi	r30, 0x10	; 16
    1636:	fe 2a       	or	r15, r30
    1638:	22 c0       	rjmp	.+68     	; 0x167e <vfprintf+0xe8>
    163a:	f7 fc       	sbrc	r15, 7
    163c:	29 c0       	rjmp	.+82     	; 0x1690 <vfprintf+0xfa>
    163e:	89 2f       	mov	r24, r25
    1640:	80 53       	subi	r24, 0x30	; 48
    1642:	8a 30       	cpi	r24, 0x0A	; 10
    1644:	70 f4       	brcc	.+28     	; 0x1662 <vfprintf+0xcc>
    1646:	f6 fe       	sbrs	r15, 6
    1648:	05 c0       	rjmp	.+10     	; 0x1654 <vfprintf+0xbe>
    164a:	98 9c       	mul	r9, r8
    164c:	90 2c       	mov	r9, r0
    164e:	11 24       	eor	r1, r1
    1650:	98 0e       	add	r9, r24
    1652:	15 c0       	rjmp	.+42     	; 0x167e <vfprintf+0xe8>
    1654:	e8 9c       	mul	r14, r8
    1656:	e0 2c       	mov	r14, r0
    1658:	11 24       	eor	r1, r1
    165a:	e8 0e       	add	r14, r24
    165c:	f0 e2       	ldi	r31, 0x20	; 32
    165e:	ff 2a       	or	r15, r31
    1660:	0e c0       	rjmp	.+28     	; 0x167e <vfprintf+0xe8>
    1662:	9e 32       	cpi	r25, 0x2E	; 46
    1664:	29 f4       	brne	.+10     	; 0x1670 <vfprintf+0xda>
    1666:	f6 fc       	sbrc	r15, 6
    1668:	6b c1       	rjmp	.+726    	; 0x1940 <vfprintf+0x3aa>
    166a:	40 e4       	ldi	r20, 0x40	; 64
    166c:	f4 2a       	or	r15, r20
    166e:	07 c0       	rjmp	.+14     	; 0x167e <vfprintf+0xe8>
    1670:	9c 36       	cpi	r25, 0x6C	; 108
    1672:	19 f4       	brne	.+6      	; 0x167a <vfprintf+0xe4>
    1674:	50 e8       	ldi	r21, 0x80	; 128
    1676:	f5 2a       	or	r15, r21
    1678:	02 c0       	rjmp	.+4      	; 0x167e <vfprintf+0xe8>
    167a:	98 36       	cpi	r25, 0x68	; 104
    167c:	49 f4       	brne	.+18     	; 0x1690 <vfprintf+0xfa>
    167e:	f2 01       	movw	r30, r4
    1680:	23 fd       	sbrc	r18, 3
    1682:	95 91       	lpm	r25, Z+
    1684:	23 ff       	sbrs	r18, 3
    1686:	91 91       	ld	r25, Z+
    1688:	2f 01       	movw	r4, r30
    168a:	99 23       	and	r25, r25
    168c:	09 f0       	breq	.+2      	; 0x1690 <vfprintf+0xfa>
    168e:	b8 cf       	rjmp	.-144    	; 0x1600 <vfprintf+0x6a>
    1690:	89 2f       	mov	r24, r25
    1692:	85 54       	subi	r24, 0x45	; 69
    1694:	83 30       	cpi	r24, 0x03	; 3
    1696:	18 f0       	brcs	.+6      	; 0x169e <vfprintf+0x108>
    1698:	80 52       	subi	r24, 0x20	; 32
    169a:	83 30       	cpi	r24, 0x03	; 3
    169c:	38 f4       	brcc	.+14     	; 0x16ac <vfprintf+0x116>
    169e:	44 e0       	ldi	r20, 0x04	; 4
    16a0:	50 e0       	ldi	r21, 0x00	; 0
    16a2:	a4 0e       	add	r10, r20
    16a4:	b5 1e       	adc	r11, r21
    16a6:	5f e3       	ldi	r21, 0x3F	; 63
    16a8:	59 83       	std	Y+1, r21	; 0x01
    16aa:	0f c0       	rjmp	.+30     	; 0x16ca <vfprintf+0x134>
    16ac:	93 36       	cpi	r25, 0x63	; 99
    16ae:	31 f0       	breq	.+12     	; 0x16bc <vfprintf+0x126>
    16b0:	93 37       	cpi	r25, 0x73	; 115
    16b2:	79 f0       	breq	.+30     	; 0x16d2 <vfprintf+0x13c>
    16b4:	93 35       	cpi	r25, 0x53	; 83
    16b6:	09 f0       	breq	.+2      	; 0x16ba <vfprintf+0x124>
    16b8:	56 c0       	rjmp	.+172    	; 0x1766 <vfprintf+0x1d0>
    16ba:	20 c0       	rjmp	.+64     	; 0x16fc <vfprintf+0x166>
    16bc:	f5 01       	movw	r30, r10
    16be:	80 81       	ld	r24, Z
    16c0:	89 83       	std	Y+1, r24	; 0x01
    16c2:	42 e0       	ldi	r20, 0x02	; 2
    16c4:	50 e0       	ldi	r21, 0x00	; 0
    16c6:	a4 0e       	add	r10, r20
    16c8:	b5 1e       	adc	r11, r21
    16ca:	61 01       	movw	r12, r2
    16cc:	01 e0       	ldi	r16, 0x01	; 1
    16ce:	10 e0       	ldi	r17, 0x00	; 0
    16d0:	12 c0       	rjmp	.+36     	; 0x16f6 <vfprintf+0x160>
    16d2:	f5 01       	movw	r30, r10
    16d4:	c0 80       	ld	r12, Z
    16d6:	d1 80       	ldd	r13, Z+1	; 0x01
    16d8:	f6 fc       	sbrc	r15, 6
    16da:	03 c0       	rjmp	.+6      	; 0x16e2 <vfprintf+0x14c>
    16dc:	6f ef       	ldi	r22, 0xFF	; 255
    16de:	7f ef       	ldi	r23, 0xFF	; 255
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <vfprintf+0x150>
    16e2:	69 2d       	mov	r22, r9
    16e4:	70 e0       	ldi	r23, 0x00	; 0
    16e6:	42 e0       	ldi	r20, 0x02	; 2
    16e8:	50 e0       	ldi	r21, 0x00	; 0
    16ea:	a4 0e       	add	r10, r20
    16ec:	b5 1e       	adc	r11, r21
    16ee:	c6 01       	movw	r24, r12
    16f0:	0e 94 b3 0c 	call	0x1966	; 0x1966 <strnlen>
    16f4:	8c 01       	movw	r16, r24
    16f6:	5f e7       	ldi	r21, 0x7F	; 127
    16f8:	f5 22       	and	r15, r21
    16fa:	14 c0       	rjmp	.+40     	; 0x1724 <vfprintf+0x18e>
    16fc:	f5 01       	movw	r30, r10
    16fe:	c0 80       	ld	r12, Z
    1700:	d1 80       	ldd	r13, Z+1	; 0x01
    1702:	f6 fc       	sbrc	r15, 6
    1704:	03 c0       	rjmp	.+6      	; 0x170c <vfprintf+0x176>
    1706:	6f ef       	ldi	r22, 0xFF	; 255
    1708:	7f ef       	ldi	r23, 0xFF	; 255
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <vfprintf+0x17a>
    170c:	69 2d       	mov	r22, r9
    170e:	70 e0       	ldi	r23, 0x00	; 0
    1710:	42 e0       	ldi	r20, 0x02	; 2
    1712:	50 e0       	ldi	r21, 0x00	; 0
    1714:	a4 0e       	add	r10, r20
    1716:	b5 1e       	adc	r11, r21
    1718:	c6 01       	movw	r24, r12
    171a:	0e 94 a8 0c 	call	0x1950	; 0x1950 <strnlen_P>
    171e:	8c 01       	movw	r16, r24
    1720:	50 e8       	ldi	r21, 0x80	; 128
    1722:	f5 2a       	or	r15, r21
    1724:	f3 fe       	sbrs	r15, 3
    1726:	07 c0       	rjmp	.+14     	; 0x1736 <vfprintf+0x1a0>
    1728:	1a c0       	rjmp	.+52     	; 0x175e <vfprintf+0x1c8>
    172a:	80 e2       	ldi	r24, 0x20	; 32
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	b3 01       	movw	r22, r6
    1730:	0e 94 be 0c 	call	0x197c	; 0x197c <fputc>
    1734:	ea 94       	dec	r14
    1736:	8e 2d       	mov	r24, r14
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	08 17       	cp	r16, r24
    173c:	19 07       	cpc	r17, r25
    173e:	a8 f3       	brcs	.-22     	; 0x172a <vfprintf+0x194>
    1740:	0e c0       	rjmp	.+28     	; 0x175e <vfprintf+0x1c8>
    1742:	f6 01       	movw	r30, r12
    1744:	f7 fc       	sbrc	r15, 7
    1746:	85 91       	lpm	r24, Z+
    1748:	f7 fe       	sbrs	r15, 7
    174a:	81 91       	ld	r24, Z+
    174c:	6f 01       	movw	r12, r30
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	b3 01       	movw	r22, r6
    1752:	0e 94 be 0c 	call	0x197c	; 0x197c <fputc>
    1756:	e1 10       	cpse	r14, r1
    1758:	ea 94       	dec	r14
    175a:	01 50       	subi	r16, 0x01	; 1
    175c:	10 40       	sbci	r17, 0x00	; 0
    175e:	01 15       	cp	r16, r1
    1760:	11 05       	cpc	r17, r1
    1762:	79 f7       	brne	.-34     	; 0x1742 <vfprintf+0x1ac>
    1764:	ea c0       	rjmp	.+468    	; 0x193a <vfprintf+0x3a4>
    1766:	94 36       	cpi	r25, 0x64	; 100
    1768:	11 f0       	breq	.+4      	; 0x176e <vfprintf+0x1d8>
    176a:	99 36       	cpi	r25, 0x69	; 105
    176c:	69 f5       	brne	.+90     	; 0x17c8 <vfprintf+0x232>
    176e:	f7 fe       	sbrs	r15, 7
    1770:	08 c0       	rjmp	.+16     	; 0x1782 <vfprintf+0x1ec>
    1772:	f5 01       	movw	r30, r10
    1774:	20 81       	ld	r18, Z
    1776:	31 81       	ldd	r19, Z+1	; 0x01
    1778:	42 81       	ldd	r20, Z+2	; 0x02
    177a:	53 81       	ldd	r21, Z+3	; 0x03
    177c:	84 e0       	ldi	r24, 0x04	; 4
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	0a c0       	rjmp	.+20     	; 0x1796 <vfprintf+0x200>
    1782:	f5 01       	movw	r30, r10
    1784:	80 81       	ld	r24, Z
    1786:	91 81       	ldd	r25, Z+1	; 0x01
    1788:	9c 01       	movw	r18, r24
    178a:	44 27       	eor	r20, r20
    178c:	37 fd       	sbrc	r19, 7
    178e:	40 95       	com	r20
    1790:	54 2f       	mov	r21, r20
    1792:	82 e0       	ldi	r24, 0x02	; 2
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	a8 0e       	add	r10, r24
    1798:	b9 1e       	adc	r11, r25
    179a:	9f e6       	ldi	r25, 0x6F	; 111
    179c:	f9 22       	and	r15, r25
    179e:	57 ff       	sbrs	r21, 7
    17a0:	09 c0       	rjmp	.+18     	; 0x17b4 <vfprintf+0x21e>
    17a2:	50 95       	com	r21
    17a4:	40 95       	com	r20
    17a6:	30 95       	com	r19
    17a8:	21 95       	neg	r18
    17aa:	3f 4f       	sbci	r19, 0xFF	; 255
    17ac:	4f 4f       	sbci	r20, 0xFF	; 255
    17ae:	5f 4f       	sbci	r21, 0xFF	; 255
    17b0:	e0 e8       	ldi	r30, 0x80	; 128
    17b2:	fe 2a       	or	r15, r30
    17b4:	ca 01       	movw	r24, r20
    17b6:	b9 01       	movw	r22, r18
    17b8:	a1 01       	movw	r20, r2
    17ba:	2a e0       	ldi	r18, 0x0A	; 10
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__ultoa_invert>
    17c2:	d8 2e       	mov	r13, r24
    17c4:	d2 18       	sub	r13, r2
    17c6:	40 c0       	rjmp	.+128    	; 0x1848 <vfprintf+0x2b2>
    17c8:	95 37       	cpi	r25, 0x75	; 117
    17ca:	29 f4       	brne	.+10     	; 0x17d6 <vfprintf+0x240>
    17cc:	1f 2d       	mov	r17, r15
    17ce:	1f 7e       	andi	r17, 0xEF	; 239
    17d0:	2a e0       	ldi	r18, 0x0A	; 10
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	1d c0       	rjmp	.+58     	; 0x1810 <vfprintf+0x27a>
    17d6:	1f 2d       	mov	r17, r15
    17d8:	19 7f       	andi	r17, 0xF9	; 249
    17da:	9f 36       	cpi	r25, 0x6F	; 111
    17dc:	61 f0       	breq	.+24     	; 0x17f6 <vfprintf+0x260>
    17de:	90 37       	cpi	r25, 0x70	; 112
    17e0:	20 f4       	brcc	.+8      	; 0x17ea <vfprintf+0x254>
    17e2:	98 35       	cpi	r25, 0x58	; 88
    17e4:	09 f0       	breq	.+2      	; 0x17e8 <vfprintf+0x252>
    17e6:	ac c0       	rjmp	.+344    	; 0x1940 <vfprintf+0x3aa>
    17e8:	0f c0       	rjmp	.+30     	; 0x1808 <vfprintf+0x272>
    17ea:	90 37       	cpi	r25, 0x70	; 112
    17ec:	39 f0       	breq	.+14     	; 0x17fc <vfprintf+0x266>
    17ee:	98 37       	cpi	r25, 0x78	; 120
    17f0:	09 f0       	breq	.+2      	; 0x17f4 <vfprintf+0x25e>
    17f2:	a6 c0       	rjmp	.+332    	; 0x1940 <vfprintf+0x3aa>
    17f4:	04 c0       	rjmp	.+8      	; 0x17fe <vfprintf+0x268>
    17f6:	28 e0       	ldi	r18, 0x08	; 8
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	0a c0       	rjmp	.+20     	; 0x1810 <vfprintf+0x27a>
    17fc:	10 61       	ori	r17, 0x10	; 16
    17fe:	14 fd       	sbrc	r17, 4
    1800:	14 60       	ori	r17, 0x04	; 4
    1802:	20 e1       	ldi	r18, 0x10	; 16
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	04 c0       	rjmp	.+8      	; 0x1810 <vfprintf+0x27a>
    1808:	14 fd       	sbrc	r17, 4
    180a:	16 60       	ori	r17, 0x06	; 6
    180c:	20 e1       	ldi	r18, 0x10	; 16
    180e:	32 e0       	ldi	r19, 0x02	; 2
    1810:	17 ff       	sbrs	r17, 7
    1812:	08 c0       	rjmp	.+16     	; 0x1824 <vfprintf+0x28e>
    1814:	f5 01       	movw	r30, r10
    1816:	60 81       	ld	r22, Z
    1818:	71 81       	ldd	r23, Z+1	; 0x01
    181a:	82 81       	ldd	r24, Z+2	; 0x02
    181c:	93 81       	ldd	r25, Z+3	; 0x03
    181e:	44 e0       	ldi	r20, 0x04	; 4
    1820:	50 e0       	ldi	r21, 0x00	; 0
    1822:	08 c0       	rjmp	.+16     	; 0x1834 <vfprintf+0x29e>
    1824:	f5 01       	movw	r30, r10
    1826:	80 81       	ld	r24, Z
    1828:	91 81       	ldd	r25, Z+1	; 0x01
    182a:	bc 01       	movw	r22, r24
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	42 e0       	ldi	r20, 0x02	; 2
    1832:	50 e0       	ldi	r21, 0x00	; 0
    1834:	a4 0e       	add	r10, r20
    1836:	b5 1e       	adc	r11, r21
    1838:	a1 01       	movw	r20, r2
    183a:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__ultoa_invert>
    183e:	d8 2e       	mov	r13, r24
    1840:	d2 18       	sub	r13, r2
    1842:	8f e7       	ldi	r24, 0x7F	; 127
    1844:	f8 2e       	mov	r15, r24
    1846:	f1 22       	and	r15, r17
    1848:	f6 fe       	sbrs	r15, 6
    184a:	0b c0       	rjmp	.+22     	; 0x1862 <vfprintf+0x2cc>
    184c:	5e ef       	ldi	r21, 0xFE	; 254
    184e:	f5 22       	and	r15, r21
    1850:	d9 14       	cp	r13, r9
    1852:	38 f4       	brcc	.+14     	; 0x1862 <vfprintf+0x2cc>
    1854:	f4 fe       	sbrs	r15, 4
    1856:	07 c0       	rjmp	.+14     	; 0x1866 <vfprintf+0x2d0>
    1858:	f2 fc       	sbrc	r15, 2
    185a:	05 c0       	rjmp	.+10     	; 0x1866 <vfprintf+0x2d0>
    185c:	8f ee       	ldi	r24, 0xEF	; 239
    185e:	f8 22       	and	r15, r24
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <vfprintf+0x2d0>
    1862:	1d 2d       	mov	r17, r13
    1864:	01 c0       	rjmp	.+2      	; 0x1868 <vfprintf+0x2d2>
    1866:	19 2d       	mov	r17, r9
    1868:	f4 fe       	sbrs	r15, 4
    186a:	0d c0       	rjmp	.+26     	; 0x1886 <vfprintf+0x2f0>
    186c:	fe 01       	movw	r30, r28
    186e:	ed 0d       	add	r30, r13
    1870:	f1 1d       	adc	r31, r1
    1872:	80 81       	ld	r24, Z
    1874:	80 33       	cpi	r24, 0x30	; 48
    1876:	19 f4       	brne	.+6      	; 0x187e <vfprintf+0x2e8>
    1878:	99 ee       	ldi	r25, 0xE9	; 233
    187a:	f9 22       	and	r15, r25
    187c:	08 c0       	rjmp	.+16     	; 0x188e <vfprintf+0x2f8>
    187e:	1f 5f       	subi	r17, 0xFF	; 255
    1880:	f2 fe       	sbrs	r15, 2
    1882:	05 c0       	rjmp	.+10     	; 0x188e <vfprintf+0x2f8>
    1884:	03 c0       	rjmp	.+6      	; 0x188c <vfprintf+0x2f6>
    1886:	8f 2d       	mov	r24, r15
    1888:	86 78       	andi	r24, 0x86	; 134
    188a:	09 f0       	breq	.+2      	; 0x188e <vfprintf+0x2f8>
    188c:	1f 5f       	subi	r17, 0xFF	; 255
    188e:	0f 2d       	mov	r16, r15
    1890:	f3 fc       	sbrc	r15, 3
    1892:	14 c0       	rjmp	.+40     	; 0x18bc <vfprintf+0x326>
    1894:	f0 fe       	sbrs	r15, 0
    1896:	0f c0       	rjmp	.+30     	; 0x18b6 <vfprintf+0x320>
    1898:	1e 15       	cp	r17, r14
    189a:	10 f0       	brcs	.+4      	; 0x18a0 <vfprintf+0x30a>
    189c:	9d 2c       	mov	r9, r13
    189e:	0b c0       	rjmp	.+22     	; 0x18b6 <vfprintf+0x320>
    18a0:	9d 2c       	mov	r9, r13
    18a2:	9e 0c       	add	r9, r14
    18a4:	91 1a       	sub	r9, r17
    18a6:	1e 2d       	mov	r17, r14
    18a8:	06 c0       	rjmp	.+12     	; 0x18b6 <vfprintf+0x320>
    18aa:	80 e2       	ldi	r24, 0x20	; 32
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	b3 01       	movw	r22, r6
    18b0:	0e 94 be 0c 	call	0x197c	; 0x197c <fputc>
    18b4:	1f 5f       	subi	r17, 0xFF	; 255
    18b6:	1e 15       	cp	r17, r14
    18b8:	c0 f3       	brcs	.-16     	; 0x18aa <vfprintf+0x314>
    18ba:	04 c0       	rjmp	.+8      	; 0x18c4 <vfprintf+0x32e>
    18bc:	1e 15       	cp	r17, r14
    18be:	10 f4       	brcc	.+4      	; 0x18c4 <vfprintf+0x32e>
    18c0:	e1 1a       	sub	r14, r17
    18c2:	01 c0       	rjmp	.+2      	; 0x18c6 <vfprintf+0x330>
    18c4:	ee 24       	eor	r14, r14
    18c6:	04 ff       	sbrs	r16, 4
    18c8:	0f c0       	rjmp	.+30     	; 0x18e8 <vfprintf+0x352>
    18ca:	80 e3       	ldi	r24, 0x30	; 48
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	b3 01       	movw	r22, r6
    18d0:	0e 94 be 0c 	call	0x197c	; 0x197c <fputc>
    18d4:	02 ff       	sbrs	r16, 2
    18d6:	1d c0       	rjmp	.+58     	; 0x1912 <vfprintf+0x37c>
    18d8:	01 fd       	sbrc	r16, 1
    18da:	03 c0       	rjmp	.+6      	; 0x18e2 <vfprintf+0x34c>
    18dc:	88 e7       	ldi	r24, 0x78	; 120
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	0e c0       	rjmp	.+28     	; 0x18fe <vfprintf+0x368>
    18e2:	88 e5       	ldi	r24, 0x58	; 88
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	0b c0       	rjmp	.+22     	; 0x18fe <vfprintf+0x368>
    18e8:	80 2f       	mov	r24, r16
    18ea:	86 78       	andi	r24, 0x86	; 134
    18ec:	91 f0       	breq	.+36     	; 0x1912 <vfprintf+0x37c>
    18ee:	01 ff       	sbrs	r16, 1
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <vfprintf+0x360>
    18f2:	8b e2       	ldi	r24, 0x2B	; 43
    18f4:	01 c0       	rjmp	.+2      	; 0x18f8 <vfprintf+0x362>
    18f6:	80 e2       	ldi	r24, 0x20	; 32
    18f8:	f7 fc       	sbrc	r15, 7
    18fa:	8d e2       	ldi	r24, 0x2D	; 45
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	b3 01       	movw	r22, r6
    1900:	0e 94 be 0c 	call	0x197c	; 0x197c <fputc>
    1904:	06 c0       	rjmp	.+12     	; 0x1912 <vfprintf+0x37c>
    1906:	80 e3       	ldi	r24, 0x30	; 48
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	b3 01       	movw	r22, r6
    190c:	0e 94 be 0c 	call	0x197c	; 0x197c <fputc>
    1910:	9a 94       	dec	r9
    1912:	d9 14       	cp	r13, r9
    1914:	c0 f3       	brcs	.-16     	; 0x1906 <vfprintf+0x370>
    1916:	da 94       	dec	r13
    1918:	f1 01       	movw	r30, r2
    191a:	ed 0d       	add	r30, r13
    191c:	f1 1d       	adc	r31, r1
    191e:	80 81       	ld	r24, Z
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	b3 01       	movw	r22, r6
    1924:	0e 94 be 0c 	call	0x197c	; 0x197c <fputc>
    1928:	dd 20       	and	r13, r13
    192a:	a9 f7       	brne	.-22     	; 0x1916 <vfprintf+0x380>
    192c:	06 c0       	rjmp	.+12     	; 0x193a <vfprintf+0x3a4>
    192e:	80 e2       	ldi	r24, 0x20	; 32
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	b3 01       	movw	r22, r6
    1934:	0e 94 be 0c 	call	0x197c	; 0x197c <fputc>
    1938:	ea 94       	dec	r14
    193a:	ee 20       	and	r14, r14
    193c:	c1 f7       	brne	.-16     	; 0x192e <vfprintf+0x398>
    193e:	43 ce       	rjmp	.-890    	; 0x15c6 <vfprintf+0x30>
    1940:	f3 01       	movw	r30, r6
    1942:	66 81       	ldd	r22, Z+6	; 0x06
    1944:	77 81       	ldd	r23, Z+7	; 0x07
    1946:	cb 01       	movw	r24, r22
    1948:	2b 96       	adiw	r28, 0x0b	; 11
    194a:	e2 e1       	ldi	r30, 0x12	; 18
    194c:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__epilogue_restores__>

00001950 <strnlen_P>:
    1950:	fc 01       	movw	r30, r24
    1952:	05 90       	lpm	r0, Z+
    1954:	61 50       	subi	r22, 0x01	; 1
    1956:	70 40       	sbci	r23, 0x00	; 0
    1958:	01 10       	cpse	r0, r1
    195a:	d8 f7       	brcc	.-10     	; 0x1952 <strnlen_P+0x2>
    195c:	80 95       	com	r24
    195e:	90 95       	com	r25
    1960:	8e 0f       	add	r24, r30
    1962:	9f 1f       	adc	r25, r31
    1964:	08 95       	ret

00001966 <strnlen>:
    1966:	fc 01       	movw	r30, r24
    1968:	61 50       	subi	r22, 0x01	; 1
    196a:	70 40       	sbci	r23, 0x00	; 0
    196c:	01 90       	ld	r0, Z+
    196e:	01 10       	cpse	r0, r1
    1970:	d8 f7       	brcc	.-10     	; 0x1968 <strnlen+0x2>
    1972:	80 95       	com	r24
    1974:	90 95       	com	r25
    1976:	8e 0f       	add	r24, r30
    1978:	9f 1f       	adc	r25, r31
    197a:	08 95       	ret

0000197c <fputc>:
    197c:	0f 93       	push	r16
    197e:	1f 93       	push	r17
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
    1984:	8c 01       	movw	r16, r24
    1986:	eb 01       	movw	r28, r22
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	81 ff       	sbrs	r24, 1
    198c:	1b c0       	rjmp	.+54     	; 0x19c4 <fputc+0x48>
    198e:	82 ff       	sbrs	r24, 2
    1990:	0d c0       	rjmp	.+26     	; 0x19ac <fputc+0x30>
    1992:	2e 81       	ldd	r18, Y+6	; 0x06
    1994:	3f 81       	ldd	r19, Y+7	; 0x07
    1996:	8c 81       	ldd	r24, Y+4	; 0x04
    1998:	9d 81       	ldd	r25, Y+5	; 0x05
    199a:	28 17       	cp	r18, r24
    199c:	39 07       	cpc	r19, r25
    199e:	64 f4       	brge	.+24     	; 0x19b8 <fputc+0x3c>
    19a0:	e8 81       	ld	r30, Y
    19a2:	f9 81       	ldd	r31, Y+1	; 0x01
    19a4:	01 93       	st	Z+, r16
    19a6:	f9 83       	std	Y+1, r31	; 0x01
    19a8:	e8 83       	st	Y, r30
    19aa:	06 c0       	rjmp	.+12     	; 0x19b8 <fputc+0x3c>
    19ac:	e8 85       	ldd	r30, Y+8	; 0x08
    19ae:	f9 85       	ldd	r31, Y+9	; 0x09
    19b0:	80 2f       	mov	r24, r16
    19b2:	09 95       	icall
    19b4:	89 2b       	or	r24, r25
    19b6:	31 f4       	brne	.+12     	; 0x19c4 <fputc+0x48>
    19b8:	8e 81       	ldd	r24, Y+6	; 0x06
    19ba:	9f 81       	ldd	r25, Y+7	; 0x07
    19bc:	01 96       	adiw	r24, 0x01	; 1
    19be:	9f 83       	std	Y+7, r25	; 0x07
    19c0:	8e 83       	std	Y+6, r24	; 0x06
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <fputc+0x4c>
    19c4:	0f ef       	ldi	r16, 0xFF	; 255
    19c6:	1f ef       	ldi	r17, 0xFF	; 255
    19c8:	c8 01       	movw	r24, r16
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	08 95       	ret

000019d4 <__ultoa_invert>:
    19d4:	fa 01       	movw	r30, r20
    19d6:	aa 27       	eor	r26, r26
    19d8:	28 30       	cpi	r18, 0x08	; 8
    19da:	51 f1       	breq	.+84     	; 0x1a30 <__ultoa_invert+0x5c>
    19dc:	20 31       	cpi	r18, 0x10	; 16
    19de:	81 f1       	breq	.+96     	; 0x1a40 <__ultoa_invert+0x6c>
    19e0:	e8 94       	clt
    19e2:	6f 93       	push	r22
    19e4:	6e 7f       	andi	r22, 0xFE	; 254
    19e6:	6e 5f       	subi	r22, 0xFE	; 254
    19e8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ea:	8f 4f       	sbci	r24, 0xFF	; 255
    19ec:	9f 4f       	sbci	r25, 0xFF	; 255
    19ee:	af 4f       	sbci	r26, 0xFF	; 255
    19f0:	b1 e0       	ldi	r27, 0x01	; 1
    19f2:	3e d0       	rcall	.+124    	; 0x1a70 <__ultoa_invert+0x9c>
    19f4:	b4 e0       	ldi	r27, 0x04	; 4
    19f6:	3c d0       	rcall	.+120    	; 0x1a70 <__ultoa_invert+0x9c>
    19f8:	67 0f       	add	r22, r23
    19fa:	78 1f       	adc	r23, r24
    19fc:	89 1f       	adc	r24, r25
    19fe:	9a 1f       	adc	r25, r26
    1a00:	a1 1d       	adc	r26, r1
    1a02:	68 0f       	add	r22, r24
    1a04:	79 1f       	adc	r23, r25
    1a06:	8a 1f       	adc	r24, r26
    1a08:	91 1d       	adc	r25, r1
    1a0a:	a1 1d       	adc	r26, r1
    1a0c:	6a 0f       	add	r22, r26
    1a0e:	71 1d       	adc	r23, r1
    1a10:	81 1d       	adc	r24, r1
    1a12:	91 1d       	adc	r25, r1
    1a14:	a1 1d       	adc	r26, r1
    1a16:	20 d0       	rcall	.+64     	; 0x1a58 <__ultoa_invert+0x84>
    1a18:	09 f4       	brne	.+2      	; 0x1a1c <__ultoa_invert+0x48>
    1a1a:	68 94       	set
    1a1c:	3f 91       	pop	r19
    1a1e:	2a e0       	ldi	r18, 0x0A	; 10
    1a20:	26 9f       	mul	r18, r22
    1a22:	11 24       	eor	r1, r1
    1a24:	30 19       	sub	r19, r0
    1a26:	30 5d       	subi	r19, 0xD0	; 208
    1a28:	31 93       	st	Z+, r19
    1a2a:	de f6       	brtc	.-74     	; 0x19e2 <__ultoa_invert+0xe>
    1a2c:	cf 01       	movw	r24, r30
    1a2e:	08 95       	ret
    1a30:	46 2f       	mov	r20, r22
    1a32:	47 70       	andi	r20, 0x07	; 7
    1a34:	40 5d       	subi	r20, 0xD0	; 208
    1a36:	41 93       	st	Z+, r20
    1a38:	b3 e0       	ldi	r27, 0x03	; 3
    1a3a:	0f d0       	rcall	.+30     	; 0x1a5a <__ultoa_invert+0x86>
    1a3c:	c9 f7       	brne	.-14     	; 0x1a30 <__ultoa_invert+0x5c>
    1a3e:	f6 cf       	rjmp	.-20     	; 0x1a2c <__ultoa_invert+0x58>
    1a40:	46 2f       	mov	r20, r22
    1a42:	4f 70       	andi	r20, 0x0F	; 15
    1a44:	40 5d       	subi	r20, 0xD0	; 208
    1a46:	4a 33       	cpi	r20, 0x3A	; 58
    1a48:	18 f0       	brcs	.+6      	; 0x1a50 <__ultoa_invert+0x7c>
    1a4a:	49 5d       	subi	r20, 0xD9	; 217
    1a4c:	31 fd       	sbrc	r19, 1
    1a4e:	40 52       	subi	r20, 0x20	; 32
    1a50:	41 93       	st	Z+, r20
    1a52:	02 d0       	rcall	.+4      	; 0x1a58 <__ultoa_invert+0x84>
    1a54:	a9 f7       	brne	.-22     	; 0x1a40 <__ultoa_invert+0x6c>
    1a56:	ea cf       	rjmp	.-44     	; 0x1a2c <__ultoa_invert+0x58>
    1a58:	b4 e0       	ldi	r27, 0x04	; 4
    1a5a:	a6 95       	lsr	r26
    1a5c:	97 95       	ror	r25
    1a5e:	87 95       	ror	r24
    1a60:	77 95       	ror	r23
    1a62:	67 95       	ror	r22
    1a64:	ba 95       	dec	r27
    1a66:	c9 f7       	brne	.-14     	; 0x1a5a <__ultoa_invert+0x86>
    1a68:	00 97       	sbiw	r24, 0x00	; 0
    1a6a:	61 05       	cpc	r22, r1
    1a6c:	71 05       	cpc	r23, r1
    1a6e:	08 95       	ret
    1a70:	9b 01       	movw	r18, r22
    1a72:	ac 01       	movw	r20, r24
    1a74:	0a 2e       	mov	r0, r26
    1a76:	06 94       	lsr	r0
    1a78:	57 95       	ror	r21
    1a7a:	47 95       	ror	r20
    1a7c:	37 95       	ror	r19
    1a7e:	27 95       	ror	r18
    1a80:	ba 95       	dec	r27
    1a82:	c9 f7       	brne	.-14     	; 0x1a76 <__ultoa_invert+0xa2>
    1a84:	62 0f       	add	r22, r18
    1a86:	73 1f       	adc	r23, r19
    1a88:	84 1f       	adc	r24, r20
    1a8a:	95 1f       	adc	r25, r21
    1a8c:	a0 1d       	adc	r26, r0
    1a8e:	08 95       	ret

00001a90 <__prologue_saves__>:
    1a90:	2f 92       	push	r2
    1a92:	3f 92       	push	r3
    1a94:	4f 92       	push	r4
    1a96:	5f 92       	push	r5
    1a98:	6f 92       	push	r6
    1a9a:	7f 92       	push	r7
    1a9c:	8f 92       	push	r8
    1a9e:	9f 92       	push	r9
    1aa0:	af 92       	push	r10
    1aa2:	bf 92       	push	r11
    1aa4:	cf 92       	push	r12
    1aa6:	df 92       	push	r13
    1aa8:	ef 92       	push	r14
    1aaa:	ff 92       	push	r15
    1aac:	0f 93       	push	r16
    1aae:	1f 93       	push	r17
    1ab0:	cf 93       	push	r28
    1ab2:	df 93       	push	r29
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	ca 1b       	sub	r28, r26
    1aba:	db 0b       	sbc	r29, r27
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	de bf       	out	0x3e, r29	; 62
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	cd bf       	out	0x3d, r28	; 61
    1ac6:	09 94       	ijmp

00001ac8 <__epilogue_restores__>:
    1ac8:	2a 88       	ldd	r2, Y+18	; 0x12
    1aca:	39 88       	ldd	r3, Y+17	; 0x11
    1acc:	48 88       	ldd	r4, Y+16	; 0x10
    1ace:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ad0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ad2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ad4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ad6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ad8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ada:	b9 84       	ldd	r11, Y+9	; 0x09
    1adc:	c8 84       	ldd	r12, Y+8	; 0x08
    1ade:	df 80       	ldd	r13, Y+7	; 0x07
    1ae0:	ee 80       	ldd	r14, Y+6	; 0x06
    1ae2:	fd 80       	ldd	r15, Y+5	; 0x05
    1ae4:	0c 81       	ldd	r16, Y+4	; 0x04
    1ae6:	1b 81       	ldd	r17, Y+3	; 0x03
    1ae8:	aa 81       	ldd	r26, Y+2	; 0x02
    1aea:	b9 81       	ldd	r27, Y+1	; 0x01
    1aec:	ce 0f       	add	r28, r30
    1aee:	d1 1d       	adc	r29, r1
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	f8 94       	cli
    1af4:	de bf       	out	0x3e, r29	; 62
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	cd bf       	out	0x3d, r28	; 61
    1afa:	ed 01       	movw	r28, r26
    1afc:	08 95       	ret

00001afe <_exit>:
    1afe:	f8 94       	cli

00001b00 <__stop_program>:
    1b00:	ff cf       	rjmp	.-2      	; 0x1b00 <__stop_program>
